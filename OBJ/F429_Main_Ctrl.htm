<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\F429_Main_Ctrl.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\F429_Main_Ctrl.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6150002: Last Updated: Tue Dec 29 13:53:39 2020
<BR><P>
<H3>Maximum Stack Usage =       3272 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; remove &rArr; FF_RmFile &rArr; FF_Open &rArr; FF_CreateFile &rArr; FF_CreateDirent &rArr; FF_FindShortName &rArr; FF_FindEntryInDir &rArr; FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[169]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[24]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC_IRQHandler</a><BR>
 <LI><a href="#[c]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">BusFault_Handler</a><BR>
 <LI><a href="#[2de]">_Alloc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e2]">_InitOnce</a><BR>
 <LI><a href="#[385]">WM__InvalidateRect</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[385]">WM__InvalidateRect</a><BR>
 <LI><a href="#[39a]">WM_InvalidateWindowAndDescsEx</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39a]">WM_InvalidateWindowAndDescsEx</a><BR>
 <LI><a href="#[396]">WM__InvalidateDrawAndDescs</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[396]">WM__InvalidateDrawAndDescs</a><BR>
 <LI><a href="#[380]">WM_SendToParent</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37d]">WM__SendMessage</a><BR>
 <LI><a href="#[3a7]">_Findy1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a7]">_Findy1</a><BR>
 <LI><a href="#[3a9]">_Findx1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a9]">_Findx1</a><BR>
 <LI><a href="#[3a8]">_Findx0</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a8]">_Findx0</a><BR>
 <LI><a href="#[384]">_DeleteAllChildren</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[381]">WM_DeleteWindow</a><BR>
 <LI><a href="#[3ac]">_PaintTransChildren</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ac]">_PaintTransChildren</a><BR>
 <LI><a href="#[a]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">HardFault_Handler</a><BR>
 <LI><a href="#[b]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">MemManage_Handler</a><BR>
 <LI><a href="#[d]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">UsageFault_Handler</a><BR>
 <LI><a href="#[8c]">touch_task</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8c]">touch_task</a><BR>
 <LI><a href="#[3ab]">_MoveDescendents</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ab]">_MoveDescendents</a><BR>
 <LI><a href="#[3a0]">WM__UpdateChildPositions</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39e]">WM_ResizeWindow</a><BR>
 <LI><a href="#[3a3]">_Screen2hWin</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a3]">_Screen2hWin</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[c]">BusFault_Handler</a> from stm32f4xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[26]">CAN1_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[27]">CAN1_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[28]">CAN1_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[25]">CAN1_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[52]">CAN2_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[53]">CAN2_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[54]">CAN2_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[51]">CAN2_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[78]">CUSTOM_CopyBuffer</a> from lcdconf_lin_template.o(.text.CUSTOM_CopyBuffer) referenced 2 times from lcdconf_lin_template.o(.text.LCD_X_Config)
 <LI><a href="#[79]">CUSTOM_CopyRect</a> from lcdconf_lin_template.o(.text.CUSTOM_CopyRect) referenced 2 times from lcdconf_lin_template.o(.text.LCD_X_Config)
 <LI><a href="#[71]">CUSTOM_FillRect</a> from lcdconf_lin_template.o(.text.CUSTOM_FillRect) referenced 2 times from lcdconf_lin_template.o(.text.CUSTOM_FillRect)
 <LI><a href="#[71]">CUSTOM_FillRect</a> from lcdconf_lin_template.o(.text.CUSTOM_FillRect) referenced 2 times from lcdconf_lin_template.o(.text.LCD_X_Config)
 <LI><a href="#[7c]">Color2IndexBulk_M1555IDMA2D</a> from lcdconf_lin_template.o(.text.Color2IndexBulk_M1555IDMA2D) referenced 2 times from lcdconf_lin_template.o(.text.LCD_X_Config)
 <LI><a href="#[80]">Color2IndexBulk_M4444IDMA2D</a> from lcdconf_lin_template.o(.text.Color2IndexBulk_M4444IDMA2D) referenced 2 times from lcdconf_lin_template.o(.text.LCD_X_Config)
 <LI><a href="#[7e]">Color2IndexBulk_M565DMA2D</a> from lcdconf_lin_template.o(.text.Color2IndexBulk_M565DMA2D) referenced 2 times from lcdconf_lin_template.o(.text.LCD_X_Config)
 <LI><a href="#[82]">Color2IndexBulk_M888DMA2D</a> from lcdconf_lin_template.o(.text.Color2IndexBulk_M888DMA2D) referenced 2 times from lcdconf_lin_template.o(.text.LCD_X_Config)
 <LI><a href="#[60]">DCMI_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[41]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[84]">DMA2D_AlphaBlending</a> from lcdconf_lin_template.o(.text.DMA2D_AlphaBlending) referenced 2 times from lcdconf_lin_template.o(.text.LCD_X_Config)
 <LI><a href="#[6b]">DMA2D_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[86]">DMA2D_MixColors</a> from lcdconf_lin_template.o(.text.DMA2D_MixColors) referenced 2 times from lcdconf_lin_template.o(.text.LCD_X_Config)
 <LI><a href="#[4a]">DMA2_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream3_IRQHandler</a> from ff_sddisk.o(.text.DMA2_Stream3_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream6_IRQHandler</a> from ff_sddisk.o(.text.DMA2_Stream6_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[f]">DebugMon_Handler</a> from stm32f4xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[8d]">EMWIN_task</a> from main.o(.text.EMWIN_task) referenced 2 times from main.o(.text.start_task)
 <LI><a href="#[4f]">ETH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[50]">ETH_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[18]">EXTI0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3a]">EXTI15_10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[19]">EXTI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1a]">EXTI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1b]">EXTI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1c]">EXTI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[29]">EXTI9_5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[16]">FLASH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[42]">FMC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[62]">FPU_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[e2]">GUIMONO_DispChar</a> from gui_charm.o(i.GUIMONO_DispChar) referenced from f6x8.o(.constdata)
 <LI><a href="#[e3]">GUIMONO_GetCharDistX</a> from gui_charm.o(i.GUIMONO_GetCharDistX) referenced from f6x8.o(.constdata)
 <LI><a href="#[e4]">GUIMONO_GetFontInfo</a> from gui_charm.o(i.GUIMONO_GetFontInfo) referenced from f6x8.o(.constdata)
 <LI><a href="#[e5]">GUIMONO_IsInFont</a> from gui_charm.o(i.GUIMONO_IsInFont) referenced from f6x8.o(.constdata)
 <LI><a href="#[e6]">GUIPROP_DispChar</a> from gui_charp.o(i.GUIPROP_DispChar) referenced from f16_1.o(.constdata)
 <LI><a href="#[e7]">GUIPROP_GetCharDistX</a> from gui_charp.o(i.GUIPROP_GetCharDistX) referenced from f16_1.o(.constdata)
 <LI><a href="#[e8]">GUIPROP_GetFontInfo</a> from gui_charp.o(i.GUIPROP_GetFontInfo) referenced from f16_1.o(.constdata)
 <LI><a href="#[e9]">GUIPROP_IsInFont</a> from gui_charp.o(i.GUIPROP_IsInFont) referenced from f16_1.o(.constdata)
 <LI><a href="#[9e]">GUI_MEMDEV_Paint1Static</a> from guidev_staticdevices.o(i.GUI_MEMDEV_Paint1Static) referenced from wm.o(i.WM__PaintWinAndOverlays)
 <LI><a href="#[9e]">GUI_MEMDEV_Paint1Static</a> from guidev_staticdevices.o(i.GUI_MEMDEV_Paint1Static) referenced from wm.o(i._PaintTransChildren)
 <LI><a href="#[b1]">GUI_MEMDEV__WriteToActiveAlpha</a> from guidev_writetoactivealpha.o(i.GUI_MEMDEV__WriteToActiveAlpha) referenced from guidev_32.o(i._GetDevFunc)
 <LI><a href="#[b0]">GUI_MEMDEV__WriteToActiveOpaque</a> from guidev_writetoactiveopaque.o(i.GUI_MEMDEV__WriteToActiveOpaque) referenced from guidev_16.o(i._GetDevFunc)
 <LI><a href="#[10c]">GUI_USAGE_BM_AddHLine</a> from guidev_usagebm.o(i.GUI_USAGE_BM_AddHLine) referenced from guidev_usagebm.o(.constdata)
 <LI><a href="#[10b]">GUI_USAGE_BM_AddPixel</a> from guidev_usagebm.o(i.GUI_USAGE_BM_AddPixel) referenced from guidev_usagebm.o(.constdata)
 <LI><a href="#[10d]">GUI_USAGE_BM_Clear</a> from guidev_usagebm.o(i.GUI_USAGE_BM_Clear) referenced from guidev_usagebm.o(.constdata)
 <LI><a href="#[10f]">GUI_USAGE_BM_GetNextDirty</a> from guidev_usagebm.o(i.GUI_USAGE_BM_GetNextDirty) referenced from guidev_usagebm.o(.constdata)
 <LI><a href="#[6]">GUI_X_ExecIdle</a> from gui_x_freertos.o(.text.GUI_X_ExecIdle) referenced 2 times from gui_waitevent.o(.data)
 <LI><a href="#[0]">GUI__MixColors</a> from gui__alpha.o(i.GUI__MixColors) referenced 2 times from gui__alpha.o(.data)
 <LI><a href="#[1]">GUI__MixColorsBulk</a> from gui__alpha.o(i.GUI__MixColorsBulk) referenced 2 times from gui__alpha.o(.data)
 <LI><a href="#[61]">HASH_RNG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[a]">HardFault_Handler</a> from stm32f4xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[32]">I2C1_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[31]">I2C1_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[34]">I2C2_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[33]">I2C2_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5b]">I2C3_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5a]">I2C3_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7d]">Index2ColorBulk_M1555IDMA2D</a> from lcdconf_lin_template.o(.text.Index2ColorBulk_M1555IDMA2D) referenced 2 times from lcdconf_lin_template.o(.text.LCD_X_Config)
 <LI><a href="#[81]">Index2ColorBulk_M4444IDMA2D</a> from lcdconf_lin_template.o(.text.Index2ColorBulk_M4444IDMA2D) referenced 2 times from lcdconf_lin_template.o(.text.LCD_X_Config)
 <LI><a href="#[7f]">Index2ColorBulk_M565DMA2D</a> from lcdconf_lin_template.o(.text.Index2ColorBulk_M565DMA2D) referenced 2 times from lcdconf_lin_template.o(.text.LCD_X_Config)
 <LI><a href="#[83]">Index2ColorBulk_M888DMA2D</a> from lcdconf_lin_template.o(.text.Index2ColorBulk_M888DMA2D) referenced 2 times from lcdconf_lin_template.o(.text.LCD_X_Config)
 <LI><a href="#[7]">LCD_AA_MixColors16</a> from lcd_aa.o(i.LCD_AA_MixColors16) referenced 2 times from lcd_aa.o(.data)
 <LI><a href="#[b2]">LCD_Color2Index_8666</a> from guicc_8666.o(i.LCD_Color2Index_8666) referenced from guicc_8666.o(.constdata)
 <LI><a href="#[7b]">LCD_DrawBitmap16bpp</a> from lcdconf_lin_template.o(.text.LCD_DrawBitmap16bpp) referenced 2 times from lcdconf_lin_template.o(.text.LCD_X_Config)
 <LI><a href="#[7a]">LCD_DrawBitmap8bpp</a> from lcdconf_lin_template.o(.text.LCD_DrawBitmap8bpp) referenced 2 times from lcdconf_lin_template.o(.text.LCD_X_Config)
 <LI><a href="#[c8]">LCD_DrawHLine</a> from lcd.o(i.LCD_DrawHLine) referenced from gui_core.o(.constdata)
 <LI><a href="#[c9]">LCD_DrawPixel</a> from lcd.o(i.LCD_DrawPixel) referenced from gui_core.o(.constdata)
 <LI><a href="#[2]">LCD_GetpPalConvTableBM</a> from lcd_color.o(i.LCD_GetpPalConvTableBM) referenced 2 times from gui_core.o(.data)
 <LI><a href="#[b3]">LCD_Index2Color_8666</a> from guicc_8666.o(i.LCD_Index2Color_8666) referenced from guicc_8666.o(.constdata)
 <LI><a href="#[cb]">LCD_Index2Color_M565</a> from guicc_m565.o(i.LCD_Index2Color_M565) referenced from guicc_m565.o(.constdata)
 <LI><a href="#[97]">LCD_Index2Color_M888</a> from guicc_m888_index2color.o(i.LCD_Index2Color_M888) referenced from guicc_m888.o(.constdata)
 <LI><a href="#[97]">LCD_Index2Color_M888</a> from guicc_m888_index2color.o(i.LCD_Index2Color_M888) referenced from gui__alpha.o(i.GUI__DoAlphaBlending)
 <LI><a href="#[96]">LCD_Index2Color_M8888I</a> from guicc_m8888i_index2color.o(i.LCD_Index2Color_M8888I) referenced from guicc_m8888i.o(.constdata)
 <LI><a href="#[96]">LCD_Index2Color_M8888I</a> from guicc_m8888i_index2color.o(i.LCD_Index2Color_M8888I) referenced from gui__alpha.o(i.GUI__DoAlphaBlending)
 <LI><a href="#[96]">LCD_Index2Color_M8888I</a> from guicc_m8888i_index2color.o(i.LCD_Index2Color_M8888I) referenced from guidev_writetoactivealpha.o(i._WriteToActiveAlpha)
 <LI><a href="#[87]">LCD_MixColorsBulk</a> from lcdconf_lin_template.o(.text.LCD_MixColorsBulk) referenced 2 times from lcdconf_lin_template.o(.text.LCD_X_Config)
 <LI><a href="#[8e]">LED_Task</a> from main.o(.text.LED_Task) referenced 2 times from main.o(.text.start_task)
 <LI><a href="#[6a]">LTDC_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[69]">LTDC_IRQHandler</a> from lcdconf_lin_template.o(.text.LTDC_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[b]">MemManage_Handler</a> from stm32f4xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[9]">NMI_Handler</a> from stm32f4xx_it.o(.text.NMI_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[55]">OTG_FS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3c]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5d]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5c]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5f]">OTG_HS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5e]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[13]">PVD_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[10]">PendSV_Handler</a> from port.o(.text.PendSV_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[17]">RCC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3b]">RTC_Alarm_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[15]">RTC_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[8]">Reset_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[68]">SAI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[43]">SDIO_IRQHandler</a> from ff_sddisk.o(.text.SDIO_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[74]">SD_DMA_RxCplt</a> from stm32f4xx_hal_sd.o(.text.SD_DMA_RxCplt) referenced 2 times from stm32f4xx_hal_sd.o(.text.HAL_SD_ReadBlocks_DMA)
 <LI><a href="#[75]">SD_DMA_RxError</a> from stm32f4xx_hal_sd.o(.text.SD_DMA_RxError) referenced 2 times from stm32f4xx_hal_sd.o(.text.HAL_SD_ReadBlocks_DMA)
 <LI><a href="#[76]">SD_DMA_TxCplt</a> from stm32f4xx_hal_sd.o(.text.SD_DMA_TxCplt) referenced 2 times from stm32f4xx_hal_sd.o(.text.HAL_SD_WriteBlocks_DMA)
 <LI><a href="#[77]">SD_DMA_TxError</a> from stm32f4xx_hal_sd.o(.text.SD_DMA_TxError) referenced 2 times from stm32f4xx_hal_sd.o(.text.HAL_SD_WriteBlocks_DMA)
 <LI><a href="#[35]">SPI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[36]">SPI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[45]">SPI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[65]">SPI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[66]">SPI5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[67]">SPI6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[e]">SVC_Handler</a> from port.o(.text.SVC_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[11]">SysTick_Handler</a> from stm32f4xx_sys.o(.text.SysTick_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6c]">SystemInit</a> from system_stm32f4xx.o(.text.SystemInit) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[14]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2a]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2d]">TIM1_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2c]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2b]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2e]">TIM2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2f]">TIM3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[30]">TIM4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[44]">TIM5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[48]">TIM6_DAC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[49]">TIM7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3d]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[40]">TIM8_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3f]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3e]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[46]">UART4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[47]">UART5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[63]">UART7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[64]">UART8_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[37]">USART1_IRQHandler</a> from stm32f4xx_sys.o(.text.USART1_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[38]">USART2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[39]">USART3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[59]">USART6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[d]">UsageFault_Handler</a> from stm32f4xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[95]">WM_HandlePID</a> from wm_touch.o(i.WM_HandlePID) referenced from gui_pid.o(i.GUI_PID_StoreState)
 <LI><a href="#[9d]">WM__Paint1</a> from wm.o(i.WM__Paint1) referenced from wm.o(i.WM__PaintWinAndOverlays)
 <LI><a href="#[9d]">WM__Paint1</a> from wm.o(i.WM__Paint1) referenced from wm.o(i._PaintTransChildren)
 <LI><a href="#[12]">WWDG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[ee]">_CalcSizeOfChar</a> from gui_uc_encodenone.o(i._CalcSizeOfChar) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[cd]">_Color2IndexBulk</a> from guicc_m565.o(i._Color2IndexBulk) referenced 2 times from guicc_m565.o(.constdata)
 <LI><a href="#[b8]">_Color2IndexBulk_88666I</a> from guicc_88666i.o(i._Color2IndexBulk_88666I) referenced from guicc_88666i.o(.constdata)
 <LI><a href="#[bd]">_Color2IndexBulk_M1555I</a> from guicc_m1555i.o(i._Color2IndexBulk_M1555I) referenced from guicc_m1555i.o(.constdata)
 <LI><a href="#[c2]">_Color2IndexBulk_M4444I</a> from guicc_m4444i.o(i._Color2IndexBulk_M4444I) referenced from guicc_m4444i.o(.constdata)
 <LI><a href="#[c6]">_Color2IndexBulk_M8888I</a> from guicc_m8888i.o(i._Color2IndexBulk_M8888I) referenced from guicc_m8888i.o(.constdata)
 <LI><a href="#[f0]">_Color2Index_0</a> from guicc_0.o(i._Color2Index_0) referenced from guicc_0.o(.constdata)
 <LI><a href="#[b5]">_Color2Index_88666I</a> from guicc_88666i.o(i._Color2Index_88666I) referenced from guicc_88666i.o(.constdata)
 <LI><a href="#[ba]">_Color2Index_M1555I</a> from guicc_m1555i.o(i._Color2Index_M1555I) referenced from guicc_m1555i.o(.constdata)
 <LI><a href="#[bf]">_Color2Index_M4444I</a> from guicc_m4444i.o(i._Color2Index_M4444I) referenced from guicc_m4444i.o(.constdata)
 <LI><a href="#[ca]">_Color2Index_M565</a> from guicc_m565.o(i._Color2Index_M565) referenced from guicc_m565.o(.constdata)
 <LI><a href="#[cf]">_Color2Index_M888</a> from guicc_m888.o(i._Color2Index_M888) referenced from guicc_m888.o(.constdata)
 <LI><a href="#[c4]">_Color2Index_M8888I</a> from guicc_m8888i.o(i._Color2Index_M8888I) referenced from guicc_m8888i.o(.constdata)
 <LI><a href="#[ac]">_CopyBuffer</a> from guidrv_lin_16.o(i._CopyBuffer) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[d6]">_DrawBitmap</a> from guidrv_lin_16.o(i._DrawBitmap) referenced 3 times from guidrv_lin_16.o(.constdata)
 <LI><a href="#[d7]">_DrawHLine</a> from guidrv_lin_16.o(i._DrawHLine) referenced 3 times from guidrv_lin_16.o(.constdata)
 <LI><a href="#[d8]">_DrawVLine</a> from guidrv_lin_16.o(i._DrawVLine) referenced 3 times from guidrv_lin_16.o(.constdata)
 <LI><a href="#[ef]">_Encode</a> from gui_uc_encodenone.o(i._Encode) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[d9]">_FillRect</a> from guidrv_lin_16.o(i._FillRect) referenced 3 times from guidrv_lin_16.o(.constdata)
 <LI><a href="#[10e]">_GUI_USAGE_BM_Delete</a> from guidev_usagebm.o(i._GUI_USAGE_BM_Delete) referenced from guidev_usagebm.o(.constdata)
 <LI><a href="#[ec]">_GetCharCode</a> from gui_uc_encodenone.o(i._GetCharCode) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[ed]">_GetCharSize</a> from gui_uc_encodenone.o(i._GetCharSize) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[e0]">_GetDevData</a> from guidrv_lin_16.o(i._GetDevData) referenced 3 times from guidrv_lin_16.o(.constdata)
 <LI><a href="#[de]">_GetDevFunc</a> from guidrv_lin_16.o(i._GetDevFunc) referenced 3 times from guidrv_lin_16.o(.constdata)
 <LI><a href="#[df]">_GetDevProp</a> from guidrv_lin_16.o(i._GetDevProp) referenced 3 times from guidrv_lin_16.o(.constdata)
 <LI><a href="#[f2]">_GetIndexMask_0</a> from guicc_0.o(i._GetIndexMask_0) referenced from guicc_0.o(.constdata)
 <LI><a href="#[b4]">_GetIndexMask_8666</a> from guicc_8666.o(i._GetIndexMask_8666) referenced from guicc_8666.o(.constdata)
 <LI><a href="#[b7]">_GetIndexMask_88666I</a> from guicc_88666i.o(i._GetIndexMask_88666I) referenced from guicc_88666i.o(.constdata)
 <LI><a href="#[bc]">_GetIndexMask_M1555I</a> from guicc_m1555i.o(i._GetIndexMask_M1555I) referenced from guicc_m1555i.o(.constdata)
 <LI><a href="#[c1]">_GetIndexMask_M4444I</a> from guicc_m4444i.o(i._GetIndexMask_M4444I) referenced from guicc_m4444i.o(.constdata)
 <LI><a href="#[cc]">_GetIndexMask_M565</a> from guicc_m565.o(i._GetIndexMask_M565) referenced from guicc_m565.o(.constdata)
 <LI><a href="#[d0]">_GetIndexMask_M888</a> from guicc_m888.o(i._GetIndexMask_M888) referenced from guicc_m888.o(.constdata)
 <LI><a href="#[c5]">_GetIndexMask_M8888I</a> from guicc_m8888i.o(i._GetIndexMask_M8888I) referenced from guicc_m8888i.o(.constdata)
 <LI><a href="#[da]">_GetPixelIndex</a> from guidrv_lin_16.o(i._GetPixelIndex) referenced 3 times from guidrv_lin_16.o(.constdata)
 <LI><a href="#[a3]">_GetPos</a> from guidrv_lin_16.o(i._GetPos) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[e1]">_GetRect</a> from guidrv_lin_16.o(i._GetRect) referenced 3 times from guidrv_lin_16.o(.constdata)
 <LI><a href="#[ce]">_Index2ColorBulk</a> from guicc_m565.o(i._Index2ColorBulk) referenced 2 times from guicc_m565.o(.constdata)
 <LI><a href="#[b9]">_Index2ColorBulk_88666I</a> from guicc_88666i.o(i._Index2ColorBulk_88666I) referenced from guicc_88666i.o(.constdata)
 <LI><a href="#[be]">_Index2ColorBulk_M1555I</a> from guicc_m1555i.o(i._Index2ColorBulk_M1555I) referenced from guicc_m1555i.o(.constdata)
 <LI><a href="#[c3]">_Index2ColorBulk_M4444I</a> from guicc_m4444i.o(i._Index2ColorBulk_M4444I) referenced from guicc_m4444i.o(.constdata)
 <LI><a href="#[c7]">_Index2ColorBulk_M8888I</a> from guicc_m8888i.o(i._Index2ColorBulk_M8888I) referenced from guicc_m8888i.o(.constdata)
 <LI><a href="#[f1]">_Index2Color_0</a> from guicc_0.o(i._Index2Color_0) referenced from guicc_0.o(.constdata)
 <LI><a href="#[b6]">_Index2Color_88666I</a> from guicc_88666i.o(i._Index2Color_88666I) referenced from guicc_88666i.o(.constdata)
 <LI><a href="#[bb]">_Index2Color_M1555I</a> from guicc_m1555i.o(i._Index2Color_M1555I) referenced from guicc_m1555i.o(.constdata)
 <LI><a href="#[c0]">_Index2Color_M4444I</a> from guicc_m4444i.o(i._Index2Color_M4444I) referenced from guicc_m4444i.o(.constdata)
 <LI><a href="#[a6]">_Init</a> from guidrv_lin_16.o(i._Init) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[85]">_LCD_GetpPalConvTable</a> from lcdconf_lin_template.o(.text._LCD_GetpPalConvTable) referenced 2 times from lcdconf_lin_template.o(.text.LCD_X_Config)
 <LI><a href="#[5]">_Log2VisBuffered</a> from gui_charline.o(i._Log2VisBuffered) referenced 2 times from gui_charline.o(.data)
 <LI><a href="#[ea]">_MULTIBUF_Begin</a> from wm_multibuf.o(i._MULTIBUF_Begin) referenced from wm_multibuf.o(.constdata)
 <LI><a href="#[eb]">_MULTIBUF_End</a> from wm_multibuf.o(i._MULTIBUF_End) referenced from wm_multibuf.o(.constdata)
 <LI><a href="#[a8]">_Off</a> from guidrv_lin_16.o(i._Off) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[a7]">_On</a> from guidrv_lin_16.o(i._On) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[91]">_OnExit</a> from gui_task.o(i._OnExit) referenced from gui_task.o(i.GUITASK_Init)
 <LI><a href="#[92]">_OnExit</a> from gui_core.o(i._OnExit) referenced from gui_core.o(i.GUI_Init)
 <LI><a href="#[93]">_OnExit</a> from gui_multibuf.o(i._OnExit) referenced from gui_multibuf.o(i.GUI_MULTIBUF_ConfigEx)
 <LI><a href="#[94]">_OnExit</a> from gui_pid.o(i._OnExit) referenced from gui_pid.o(i.GUI_PID_StoreState)
 <LI><a href="#[98]">_OnExit</a> from gui__alpha.o(i._OnExit) referenced from gui__alpha.o(i.GUI__GetAlphaBuffer)
 <LI><a href="#[99]">_OnExit</a> from lcd_color.o(i._OnExit) referenced from lcd_color.o(i.LCD_InitColors)
 <LI><a href="#[9c]">_OnExit</a> from wm.o(i._OnExit) referenced from wm.o(i.WM_Init)
 <LI><a href="#[af]">_ReadRect</a> from guidrv_lin_16.o(i._ReadRect) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[a4]">_SetAlpha</a> from guidrv_lin_16.o(i._SetAlpha) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[a9]">_SetAlphaMode</a> from guidrv_lin_16.o(i._SetAlphaMode) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[d4]">_SetBkColor</a> from lcd.o(i._SetBkColor) referenced from lcd.o(.constdata)
 <LI><a href="#[ab]">_SetChroma</a> from guidrv_lin_16.o(i._SetChroma) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[aa]">_SetChromaMode</a> from guidrv_lin_16.o(i._SetChromaMode) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[d3]">_SetColor</a> from lcd.o(i._SetColor) referenced from lcd.o(.constdata)
 <LI><a href="#[ae]">_SetDevFunc</a> from guidrv_lin_16.o(i._SetDevFunc) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[d5]">_SetDrawMode</a> from lcd.o(i._SetDrawMode) referenced from lcd.o(.constdata)
 <LI><a href="#[dd]">_SetOrg</a> from guidrv_lin_16.o(i._SetOrg) referenced 3 times from guidrv_lin_16.o(.constdata)
 <LI><a href="#[db]">_SetPixelIndex</a> from guidrv_lin_16.o(i._SetPixelIndex) referenced 3 times from guidrv_lin_16.o(.constdata)
 <LI><a href="#[a2]">_SetPos</a> from guidrv_lin_16.o(i._SetPos) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[a1]">_SetSize</a> from guidrv_lin_16.o(i._SetSize) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[9f]">_SetVRAMAddr</a> from guidrv_lin_16.o(i._SetVRAMAddr) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[a0]">_SetVSize</a> from guidrv_lin_16.o(i._SetVSize) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[a5]">_SetVis</a> from guidrv_lin_16.o(i._SetVis) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[ad]">_ShowBuffer</a> from guidrv_lin_16.o(i._ShowBuffer) referenced from guidrv_lin_16.o(i._GetDevFunc)
 <LI><a href="#[dc]">_XorPixel</a> from guidrv_lin_16.o(i._XorPixel) referenced 3 times from guidrv_lin_16.o(.constdata)
 <LI><a href="#[6d]">__main</a> from __main.o(!!!main) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[9b]">_cbBackWin</a> from wm.o(i._cbBackWin) referenced from wm.o(i.WM_Init)
 <LI><a href="#[9a]">_cbPaintMemDev</a> from wm.o(i._cbPaintMemDev) referenced from wm.o(i.WM_Exec)
 <LI><a href="#[6f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[6e]">_snputc</a> from _snputc.o(.text) referenced from __2snprintf.o(.text)
 <LI><a href="#[70]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[4]">memcpy</a> from memcpy.o(.text) referenced 2 times from gui__private.o(.data)
 <LI><a href="#[3]">memset</a> from memset.o(.text) referenced 2 times from gui__private.o(.data)
 <LI><a href="#[89]">prvEventSetupFunction</a> from ff_sddisk.o(.text.prvEventSetupFunction) referenced 2 times from ff_sddisk.o(.text.prvSDMMCInit)
 <LI><a href="#[8a]">prvEventWaitFunction</a> from ff_sddisk.o(.text.prvEventWaitFunction) referenced 2 times from ff_sddisk.o(.text.prvSDMMCInit)
 <LI><a href="#[73]">prvFFRead</a> from ff_sddisk.o(.text.prvFFRead) referenced 2 times from ff_sddisk.o(.text.FF_SDDiskInit)
 <LI><a href="#[72]">prvFFWrite</a> from ff_sddisk.o(.text.prvFFWrite) referenced 2 times from ff_sddisk.o(.text.FF_SDDiskInit)
 <LI><a href="#[8f]">prvIdleTask</a> from tasks.o(.text.prvIdleTask) referenced 2 times from tasks.o(.text.vTaskStartScheduler)
 <LI><a href="#[8b]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced 2 times from port.o(.text.pxPortInitialiseStack)
 <LI><a href="#[90]">prvTimerTask</a> from timers.o(.text.prvTimerTask) referenced 2 times from timers.o(.text.xTimerCreateTimerTask)
 <LI><a href="#[88]">start_task</a> from main.o(.text.start_task) referenced 2 times from main.o(.text.main)
 <LI><a href="#[8c]">touch_task</a> from main.o(.text.touch_task) referenced 2 times from main.o(.text.start_task)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[111]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[113]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3b4]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3b5]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3b6]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[3b7]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[3b8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[114]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[13c]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[116]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[117]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[119]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[11b]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[3b9]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[126]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[11d]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[3ba]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[3bb]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[3bc]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[3bd]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[3be]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[3bf]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[3c0]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[3c1]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[3c2]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[3c3]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[3c4]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[3c5]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[3c6]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 3272 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; remove &rArr; FF_RmFile &rArr; FF_Open &rArr; FF_CreateFile &rArr; FF_CreateDirent &rArr; FF_FindShortName &rArr; FF_FindEntryInDir &rArr; FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[3c7]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3c8]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[3c9]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[3ca]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[3cb]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[3cc]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[3cd]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[12b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[3ce]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[121]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 3256 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; remove &rArr; FF_RmFile &rArr; FF_Open &rArr; FF_CreateFile &rArr; FF_CreateDirent &rArr; FF_FindShortName &rArr; FF_FindEntryInDir &rArr; FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[3cf]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[3d0]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[3d1]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[3d2]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[3d3]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[3d4]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[112]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[3d5]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[123]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[125]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[3d6]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[127]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3d7]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[14f]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[12a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[3d8]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[12c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __rt_exit_exit &rArr; _sys_exit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[8]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[169]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3d9]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[3da]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[3db]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[3dc]"></a>__use_no_heap_region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hrguard.o(.text), UNUSED)

<P><STRONG><a name="[3dd]"></a>__heap_region$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hrguard.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SDDiskShowPartition
</UL>

<P><STRONG><a name="[3de]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortDefineHeapRegions
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Touch_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SDDiskInit
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvABSPath
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Open
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockFAT
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockDirectory
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseSemaphore
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PendSemaphore
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockFAT
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetBuffer
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetThreadLocalStoragePointer
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Mount
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PartitionSearch
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Assert_Lock
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FS_Add
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SDDiskShowPartition
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SDDiskMount
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSDMMCInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFFWrite
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFFRead
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
</UL>

<P><STRONG><a name="[130]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvABSPath
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindShortName
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSDCodePrintable
</UL>

<P><STRONG><a name="[134]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[135]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[133]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[115]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[137]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[118]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[138]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[139]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[13a]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[15d]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[13d]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _sys_flen
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[3df]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[3e0]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>puts</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Touch_Init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPIFlash_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SDDiskInit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Mount
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PartitionSearch
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_CheckWriteOperation
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_CheckReadOperation
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SDDiskShowPartition
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>

<P><STRONG><a name="[164]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[144]"></a>freopen</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3264 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; remove &rArr; FF_RmFile &rArr; FF_Open &rArr; FF_CreateFile &rArr; FF_CreateDirent &rArr; FF_FindShortName &rArr; FF_FindEntryInDir &rArr; FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[147]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[145]"></a>_fclose_internal</STRONG> (Thumb, 102 bytes, Stack size 288 bytes, fclose_tmpfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3240 + Unknown Stack Size
<LI>Call Chain = _fclose_internal &rArr; remove &rArr; FF_RmFile &rArr; FF_Open &rArr; FF_CreateFile &rArr; FF_CreateDirent &rArr; FF_FindShortName &rArr; FF_FindEntryInDir &rArr; FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_tmpnam
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[3e1]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 288 bytes, fclose_tmpfile.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1c3]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FS_Find
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindEntryInDir
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Mount
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FS_Add
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_StoreStateEx
</UL>

<P><STRONG><a name="[1e2]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PopulateLongDirent
</UL>

<P><STRONG><a name="[1a1]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Open
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FS_Find
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_strmatch
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PopulateShortDirent
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindShortName
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindEntryInDir
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindDir
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateShortName
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateDirent
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FS_Add
</UL>

<P><STRONG><a name="[1b7]"></a>memchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, memchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateShortName
</UL>

<P><STRONG><a name="[153]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_strtok
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PutEntry
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PushEntryWithContext
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PopulateShortDirent
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindShortName
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindEntryInDir
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindDir
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FetchEntryWithContext
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Mount
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_WritePartial
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFFWrite
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFFRead
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[150]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[3e2]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[3ae]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[152]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
</UL>

<P><STRONG><a name="[3e3]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>memcpy</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__private.o(.data)
</UL>
<P><STRONG><a name="[151]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateFile
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SaveContext_W
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RestoreContext
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
</UL>

<P><STRONG><a name="[3e4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3e5]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3e6]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>memset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__private.o(.data)
</UL>
<P><STRONG><a name="[156]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateShortName
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_AddHLine
</UL>

<P><STRONG><a name="[157]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[3e7]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetBuffer
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ClearCluster
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateLFNEntry
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Mount
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateIOManger
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFFRead
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[159]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[155]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[149]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_CPU_TEMP_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SDDiskInit
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_RmFile
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Open
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_InitEntryFetch
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindDir
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateFile
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateDirent
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Mount
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateIOManger
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FS_Add
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSDMMCInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Clear
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[3e8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[3e9]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[15a]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Open
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateFile
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FS_Add
</UL>

<P><STRONG><a name="[1d6]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7em.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindShortName
</UL>

<P><STRONG><a name="[3ea]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3eb]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3ec]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3ed]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3ee]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3ef]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3f0]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[131]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[132]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[6e]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[15c]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[11a]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[11c]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[12f]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[15e]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[3b3]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[3f1]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[160]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; FF_Write &rArr; FF_ExtendFile &rArr; FF_GetEntry &rArr; FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[14a]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208 + Unknown Stack Size
<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; FF_Write &rArr; FF_ExtendFile &rArr; FF_GetEntry &rArr; FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[15f]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[120]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3272 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; remove &rArr; FF_RmFile &rArr; FF_Open &rArr; FF_CreateFile &rArr; FF_CreateDirent &rArr; FF_FindShortName &rArr; FF_FindEntryInDir &rArr; FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[122]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3256 + Unknown Stack Size
<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; remove &rArr; FF_RmFile &rArr; FF_Open &rArr; FF_CreateFile &rArr; FF_CreateDirent &rArr; FF_FindShortName &rArr; FF_FindEntryInDir &rArr; FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[3f2]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[3f3]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[154]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[3f4]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __sig_exit &rArr; _sys_exit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[163]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __rt_SIGRTRED &rArr; __sig_exit &rArr; _sys_exit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[124]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[16a]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __default_signal_display &rArr; _ttywrch &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[167]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[c]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ff_sddisk.o(.text.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; xQueueGiveFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ff_sddisk.o(.text.DMA2_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; xQueueGiveFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>EMWIN_task</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(.text.EMWIN_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = EMWIN_task &rArr; GUI_Delay &rArr; GUI_Exec &rArr; WM_Exec &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MULTIBUF_Enable
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMWin_MainTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.start_task)
</UL>
<P><STRONG><a name="[176]"></a>EMWin_MainTask</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, emwin_task.o(.text.EMWin_MainTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = EMWin_MainTask &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMWIN_task
</UL>

<P><STRONG><a name="[17d]"></a>EndIdleMonitor</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, cpu_utils.o(.text.EndIdleMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = EndIdleMonitor &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[180]"></a>FAT_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, main.o(.text.FAT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = FAT_Init &rArr; FF_SDDiskInit &rArr; FF_SDDiskMount &rArr; FF_Mount &rArr; FF_PartitionSearch &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SDDiskInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[183]"></a>FF_Assert_Lock</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ff_locking.o(.text.FF_Assert_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = FF_Assert_Lock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_putFATEntry
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getFATEntry
</UL>

<P><STRONG><a name="[185]"></a>FF_BlockWrite</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ff_ioman.o(.text.FF_BlockWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = FF_BlockWrite &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseSemaphore
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PendSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Write
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ClearCluster
</UL>

<P><STRONG><a name="[188]"></a>FF_BufferProceed</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ff_locking.o(.text.FF_BufferProceed))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = FF_BufferProceed &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
</UL>

<P><STRONG><a name="[18a]"></a>FF_BufferWait</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ff_locking.o(.text.FF_BufferWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = FF_BufferWait &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetBuffer
</UL>

<P><STRONG><a name="[290]"></a>FF_BytesLeft</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ff_file.o(.text.FF_BytesLeft))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[18c]"></a>FF_CheckValid</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ff_file.o(.text.FF_CheckValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = FF_CheckValid &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseSemaphore
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PendSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Write
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Seek
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Close
</UL>

<P><STRONG><a name="[18d]"></a>FF_CleanupEntryFetch</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ff_dir.o(.text.FF_CleanupEntryFetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = FF_CleanupEntryFetch &rArr; FF_ReleaseBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_RmFile
</UL>

<P><STRONG><a name="[18f]"></a>FF_ClearCluster</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, ff_fat.o(.text.FF_ClearCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = FF_ClearCluster &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetBuffer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_BlockWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ExtendDirectory
</UL>

<P><STRONG><a name="[191]"></a>FF_Close</STRONG> (Thumb, 282 bytes, Stack size 320 bytes, ff_file.o(.text.FF_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384 + Unknown Stack Size
<LI>Call Chain = FF_Close &rArr; FF_Truncate &rArr; FF_GetEntry &rArr; FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseSemaphore
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PutEntry
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PendSemaphore
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetEntry
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FlushCache
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CheckValid
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Truncate
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_RmFile
</UL>

<P><STRONG><a name="[1c8]"></a>FF_Cluster2LBA</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff_fat.o(.text.FF_Cluster2LBA))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Write
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PushEntryWithContext
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FetchEntryWithContext
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SetCluster
</UL>

<P><STRONG><a name="[197]"></a>FF_CountFreeClusters</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, ff_fat.o(.text.FF_CountFreeClusters))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = FF_CountFreeClusters &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getShort
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getLong
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockFAT
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockFAT
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetBuffer
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Has_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ExtendDirectory
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_DecreaseFreeClusters
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Mount
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_IncreaseFreeClusters
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetFreeSize
</UL>

<P><STRONG><a name="[19d]"></a>FF_CreateClusterChain</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ff_fat.o(.text.FF_CreateClusterChain))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = FF_CreateClusterChain &rArr; FF_DecreaseFreeClusters &rArr; FF_FindFreeCluster &rArr; FF_putFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockFAT
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockFAT
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindFreeCluster
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_DecreaseFreeClusters
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateFile
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ExtendFile
</UL>

<P><STRONG><a name="[1a0]"></a>FF_CreateDirent</STRONG> (Thumb, 1032 bytes, Stack size 672 bytes, ff_dir.o(.text.FF_CreateDirent))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864 + Unknown Stack Size
<LI>Call Chain = FF_CreateDirent &rArr; FF_FindShortName &rArr; FF_FindEntryInDir &rArr; FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_putShort
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_putLong
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_putChar
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Utf8ctoUtf16c
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockDirectory
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PushEntryWithContext
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockDirectory
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_InitEntryFetch
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetUtf16SequenceLen
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindShortName
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FetchEntryWithContext
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ExtendDirectory
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateShortName
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateLFNEntry
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateFile
</UL>

<P><STRONG><a name="[1b0]"></a>FF_CreateEvents</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ff_locking.o(.text.FF_CreateEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = FF_CreateEvents &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateIOManger
</UL>

<P><STRONG><a name="[1b2]"></a>FF_CreateFile</STRONG> (Thumb, 160 bytes, Stack size 336 bytes, ff_dir.o(.text.FF_CreateFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 2200 + Unknown Stack Size
<LI>Call Chain = FF_CreateFile &rArr; FF_CreateDirent &rArr; FF_FindShortName &rArr; FF_FindEntryInDir &rArr; FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockFAT
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlinkClusterChain
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockFAT
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FlushCache
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateDirent
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateClusterChain
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Open
</UL>

<P><STRONG><a name="[1b4]"></a>FF_CreateIOManger</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, ff_ioman.o(.text.FF_CreateIOManger))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = FF_CreateIOManger &rArr; FF_CreateEvents &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_DeleteIOManager
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateEvents
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SDDiskInit
</UL>

<P><STRONG><a name="[1a3]"></a>FF_CreateShortName</STRONG> (Thumb, 460 bytes, Stack size 48 bytes, ff_dir.o(.text.FF_CreateShortName))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = FF_CreateShortName &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Open
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateDirent
</UL>

<P><STRONG><a name="[19f]"></a>FF_DecreaseFreeClusters</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, ff_ioman.o(.text.FF_DecreaseFreeClusters))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = FF_DecreaseFreeClusters &rArr; FF_FindFreeCluster &rArr; FF_putFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_putLong
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getLong
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockFAT
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockFAT
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetBuffer
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindFreeCluster
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CountFreeClusters
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ExtendDirectory
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateClusterChain
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ExtendFile
</UL>

<P><STRONG><a name="[1ba]"></a>FF_DeleteEvents</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ff_locking.o(.text.FF_DeleteEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = FF_DeleteEvents &rArr; vEventGroupDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_DeleteIOManager
</UL>

<P><STRONG><a name="[1b6]"></a>FF_DeleteIOManager</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ff_ioman.o(.text.FF_DeleteIOManager))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = FF_DeleteIOManager &rArr; FF_DeleteEvents &rArr; vEventGroupDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_DeleteEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateIOManger
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SDDiskDelete
</UL>

<P><STRONG><a name="[1a7]"></a>FF_ExtendDirectory</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, ff_dir.o(.text.FF_ExtendDirectory))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = FF_ExtendDirectory &rArr; FF_DecreaseFreeClusters &rArr; FF_FindFreeCluster &rArr; FF_putFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_putFATEntry
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockFAT
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseFATBuffers
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockFAT
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindFreeCluster
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindEndOfChain
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_DecreaseFreeClusters
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CountFreeClusters
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ClearCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateDirent
</UL>

<P><STRONG><a name="[1c1]"></a>FF_FS_Add</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, ff_sys.o(.text.FF_FS_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = FF_FS_Add &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SDDiskInit
</UL>

<P><STRONG><a name="[1c5]"></a>FF_FS_Find</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, ff_sys.o(.text.FF_FS_Find))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FF_FS_Find &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1a6]"></a>FF_FetchEntryWithContext</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, ff_dir.o(.text.FF_FetchEntryWithContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getMinorBlockNumber
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getMinorBlockEntry
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getMajorBlockNumber
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetBuffer
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Cluster2LBA
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Traverse
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_RmFile
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_RmLFNs
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PutEntry
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PopulateLongDirent
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetEntry
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindShortName
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindEntryInDir
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateDirent
</UL>

<P><STRONG><a name="[1cb]"></a>FF_FindDir</STRONG> (Thumb, 388 bytes, Stack size 672 bytes, ff_dir.o(.text.FF_FindDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432 + Unknown Stack Size
<LI>Call Chain = FF_FindDir &rArr; FF_FindEntryInDir &rArr; FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_strtok
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_strmatch
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseSemaphore
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PendSemaphore
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindEntryInDir
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Open
</UL>

<P><STRONG><a name="[1bc]"></a>FF_FindEndOfChain</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ff_fat.o(.text.FF_FindEndOfChain))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = FF_FindEndOfChain &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_TraverseFAT
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ExtendDirectory
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ExtendFile
</UL>

<P><STRONG><a name="[1ce]"></a>FF_FindEntryInDir</STRONG> (Thumb, 918 bytes, Stack size 120 bytes, ff_dir.o(.text.FF_FindEntryInDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = FF_FindEntryInDir &rArr; FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getChar
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Utf16ctoUtf8c
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PopulateShortDirent
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PopulateLongDirent
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_InitEntryFetch
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FetchEntryWithContext
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Open
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindShortName
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindDir
</UL>

<P><STRONG><a name="[19e]"></a>FF_FindFreeCluster</STRONG> (Thumb, 450 bytes, Stack size 56 bytes, ff_fat.o(.text.FF_FindFreeCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = FF_FindFreeCluster &rArr; FF_putFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_putFATEntry
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getShort
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getLong
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockFAT
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockFAT
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetBuffer
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Has_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ExtendDirectory
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_DecreaseFreeClusters
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateClusterChain
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Mount
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ExtendFile
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_IncreaseFreeClusters
</UL>

<P><STRONG><a name="[1a4]"></a>FF_FindShortName</STRONG> (Thumb, 720 bytes, Stack size 432 bytes, ff_dir.o(.text.FF_FindShortName))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = FF_FindShortName &rArr; FF_FindEntryInDir &rArr; FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getChar
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_InitEntryFetch
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindEntryInDir
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FetchEntryWithContext
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetCRC16
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateDirent
</UL>

<P><STRONG><a name="[196]"></a>FF_FlushCache</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, ff_ioman.o(.text.FF_FlushCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = FF_FlushCache &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseSemaphore
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PendSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Seek
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_RmFile
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Close
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateFile
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Unmount
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ExtendFile
</UL>

<P><STRONG><a name="[190]"></a>FF_GetBuffer</STRONG> (Thumb, 420 bytes, Stack size 32 bytes, ff_ioman.o(.text.FF_GetBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseSemaphore
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PendSemaphore
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_BufferWait
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PushEntryWithContext
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindFreeCluster
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FetchEntryWithContext
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_DecreaseFreeClusters
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CountFreeClusters
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ClearCluster
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Mount
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PartitionSearch
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_WritePartial
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetFromFATBuffers
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_IncreaseFreeClusters
</UL>

<P><STRONG><a name="[1d5]"></a>FF_GetCRC16</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ff_crc.o(.text.FF_GetCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FF_GetCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindShortName
</UL>

<P><STRONG><a name="[1de]"></a>FF_GetCRC32</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ff_crc.o(.text.FF_GetCRC32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FF_GetCRC32
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Mount
</UL>

<P><STRONG><a name="[1c0]"></a>FF_GetChainLength</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, ff_fat.o(.text.FF_GetChainLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = FF_GetChainLength &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockFAT
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockFAT
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getFATEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_InitEntryFetch
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Truncate
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ExtendFile
</UL>

<P><STRONG><a name="[192]"></a>FF_GetEntry</STRONG> (Thumb, 156 bytes, Stack size 80 bytes, ff_dir.o(.text.FF_GetEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = FF_GetEntry &rArr; FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getChar
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PopulateShortDirent
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PopulateLongDirent
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_InitEntryFetch
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FetchEntryWithContext
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Close
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Truncate
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ExtendFile
</UL>

<P><STRONG><a name="[1d8]"></a>FF_GetFreeSize</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ff_fat.o(.text.FF_GetFreeSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = FF_GetFreeSize &rArr; FF_CountFreeClusters &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockFAT
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockFAT
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CountFreeClusters
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SDDiskShowPartition
</UL>

<P><STRONG><a name="[1a9]"></a>FF_GetUtf16SequenceLen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff_string.o(.text.FF_GetUtf16SequenceLen))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateDirent
</UL>

<P><STRONG><a name="[198]"></a>FF_Has_Lock</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ff_locking.o(.text.FF_Has_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FF_Has_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlinkClusterChain
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_TraverseFAT
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockFAT
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindFreeCluster
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CountFreeClusters
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_IncreaseFreeClusters
</UL>

<P><STRONG><a name="[1da]"></a>FF_IncreaseFreeClusters</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, ff_ioman.o(.text.FF_IncreaseFreeClusters))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = FF_IncreaseFreeClusters &rArr; FF_FindFreeCluster &rArr; FF_putFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_putLong
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getLong
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockFAT
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockFAT
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetBuffer
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindFreeCluster
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CountFreeClusters
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Has_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlinkClusterChain
</UL>

<P><STRONG><a name="[1a5]"></a>FF_InitEntryFetch</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ff_dir.o(.text.FF_InitEntryFetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = FF_InitEntryFetch &rArr; FF_GetChainLength &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetChainLength
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_RmFile
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PutEntry
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetEntry
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindShortName
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindEntryInDir
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateDirent
</UL>

<P><STRONG><a name="[1a2]"></a>FF_LockDirectory</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ff_locking.o(.text.FF_LockDirectory))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = FF_LockDirectory &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_RmFile
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateDirent
</UL>

<P><STRONG><a name="[199]"></a>FF_LockFAT</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ff_locking.o(.text.FF_LockFAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = FF_LockFAT &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Has_Lock
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Write
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_RmFile
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlinkClusterChain
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_TraverseFAT
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetChainLength
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindFreeCluster
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ExtendDirectory
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_DecreaseFreeClusters
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateFile
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateClusterChain
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CountFreeClusters
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Mount
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Truncate
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SetCluster
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetSequentialClusters
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ExtendFile
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_IncreaseFreeClusters
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetFreeSize
</UL>

<P><STRONG><a name="[1dc]"></a>FF_Mount</STRONG> (Thumb, 1292 bytes, Stack size 64 bytes, ff_ioman.o(.text.FF_Mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = FF_Mount &rArr; FF_PartitionSearch &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_putLong
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getShort
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getLong
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getChar
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockFAT
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockFAT
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetBuffer
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindFreeCluster
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CountFreeClusters
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetCRC32
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PartitionSearch
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SDDiskMount
</UL>

<P><STRONG><a name="[1df]"></a>FF_Open</STRONG> (Thumb, 608 bytes, Stack size 656 bytes, ff_file.o(.text.FF_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 2856 + Unknown Stack Size
<LI>Call Chain = FF_Open &rArr; FF_CreateFile &rArr; FF_CreateDirent &rArr; FF_FindShortName &rArr; FF_FindEntryInDir &rArr; FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_strmatch
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseSemaphore
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PendSemaphore
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindEntryInDir
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindDir
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateShortName
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateFile
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_RmFile
</UL>

<P><STRONG><a name="[1dd]"></a>FF_PartitionSearch</STRONG> (Thumb, 1188 bytes, Stack size 184 bytes, ff_ioman.o(.text.FF_PartitionSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = FF_PartitionSearch &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getShort
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getLong
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getChar
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetBuffer
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReadParts
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Mount
</UL>

<P><STRONG><a name="[186]"></a>FF_PendSemaphore</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ff_locking.o(.text.FF_PendSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = FF_PendSemaphore &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Open
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Close
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetBuffer
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FlushCache
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindDir
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Unmount
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CheckValid
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_BlockWrite
</UL>

<P><STRONG><a name="[1d4]"></a>FF_PopulateLongDirent</STRONG> (Thumb, 468 bytes, Stack size 120 bytes, ff_dir.o(.text.FF_PopulateLongDirent))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getShort
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getLong
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getChar
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Utf16ctoUtf8c
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FetchEntryWithContext
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetEntry
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindEntryInDir
</UL>

<P><STRONG><a name="[1d3]"></a>FF_PopulateShortDirent</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, ff_dir.o(.text.FF_PopulateShortDirent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FF_PopulateShortDirent &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_tolower
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getShort
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getLong
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getChar
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetEntry
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindEntryInDir
</UL>

<P><STRONG><a name="[1ab]"></a>FF_PushEntryWithContext</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, ff_dir.o(.text.FF_PushEntryWithContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = FF_PushEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getMinorBlockNumber
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getMinorBlockEntry
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getMajorBlockNumber
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetBuffer
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Cluster2LBA
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Traverse
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_RmFile
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_RmLFNs
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PutEntry
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateDirent
</UL>

<P><STRONG><a name="[193]"></a>FF_PutEntry</STRONG> (Thumb, 150 bytes, Stack size 72 bytes, ff_dir.o(.text.FF_PutEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = FF_PutEntry &rArr; FF_PushEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_putShort
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_putLong
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_putChar
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PushEntryWithContext
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_InitEntryFetch
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FetchEntryWithContext
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Close
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Truncate
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ExtendFile
</UL>

<P><STRONG><a name="[1e0]"></a>FF_ReadParts</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ff_ioman.o(.text.FF_ReadParts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FF_ReadParts
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getLong
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PartitionSearch
</UL>

<P><STRONG><a name="[18e]"></a>FF_ReleaseBuffer</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, ff_ioman.o(.text.FF_ReleaseBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = FF_ReleaseBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseSemaphore
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PendSemaphore
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_BufferProceed
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_putFATEntry
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlinkClusterChain
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_TraverseFAT
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseFATBuffers
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PutEntry
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PushEntryWithContext
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetEntry
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetChainLength
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindShortName
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindFreeCluster
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindEntryInDir
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FetchEntryWithContext
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_DecreaseFreeClusters
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateDirent
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CountFreeClusters
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ClearCluster
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CleanupEntryFetch
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Mount
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PartitionSearch
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_WritePartial
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetFromFATBuffers
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getFATEntry
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_IncreaseFreeClusters
</UL>

<P><STRONG><a name="[1be]"></a>FF_ReleaseFATBuffers</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ff_fat.o(.text.FF_ReleaseFATBuffers))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = FF_ReleaseFATBuffers &rArr; FF_ReleaseBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ExtendDirectory
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetSequentialClusters
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ExtendFile
</UL>

<P><STRONG><a name="[187]"></a>FF_ReleaseSemaphore</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ff_locking.o(.text.FF_ReleaseSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Open
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Close
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetBuffer
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FlushCache
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindDir
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Unmount
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CheckValid
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_BlockWrite
</UL>

<P><STRONG><a name="[1e5]"></a>FF_RmFile</STRONG> (Thumb, 238 bytes, Stack size 72 bytes, ff_file.o(.text.FF_RmFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 2928 + Unknown Stack Size
<LI>Call Chain = FF_RmFile &rArr; FF_Open &rArr; FF_CreateFile &rArr; FF_CreateDirent &rArr; FF_FindShortName &rArr; FF_FindEntryInDir &rArr; FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Open
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Close
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_putShort
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockFAT
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockDirectory
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlinkClusterChain
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_RmLFNs
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PushEntryWithContext
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockFAT
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockDirectory
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_InitEntryFetch
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FlushCache
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FetchEntryWithContext
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CleanupEntryFetch
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove
</UL>

<P><STRONG><a name="[1e6]"></a>FF_RmLFNs</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, ff_dir.o(.text.FF_RmLFNs))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = FF_RmLFNs &rArr; FF_PushEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_putChar
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getChar
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PushEntryWithContext
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FetchEntryWithContext
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_RmFile
</UL>

<P><STRONG><a name="[1e7]"></a>FF_SDDiskDelete</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ff_sddisk.o(.text.FF_SDDiskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = FF_SDDiskDelete &rArr; FF_Unmount &rArr; FF_FlushCache &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Unmount
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_DeleteIOManager
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SDDiskInit
</UL>

<P><STRONG><a name="[181]"></a>FF_SDDiskInit</STRONG> (Thumb, 388 bytes, Stack size 56 bytes, ff_sddisk.o(.text.FF_SDDiskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = FF_SDDiskInit &rArr; FF_SDDiskMount &rArr; FF_Mount &rArr; FF_PartitionSearch &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateIOManger
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FS_Add
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SDDiskShowPartition
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SDDiskMount
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SDDiskDelete
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSDMMCInit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
</UL>

<P><STRONG><a name="[1eb]"></a>FF_SDDiskMount</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, ff_sddisk.o(.text.FF_SDDiskMount))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = FF_SDDiskMount &rArr; FF_Mount &rArr; FF_PartitionSearch &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Mount
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SDDiskInit
</UL>

<P><STRONG><a name="[1ec]"></a>FF_SDDiskShowPartition</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, ff_sddisk.o(.text.FF_SDDiskShowPartition))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = FF_SDDiskShowPartition &rArr; FF_GetFreeSize &rArr; FF_CountFreeClusters &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetFreeSize
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SDDiskInit
</UL>

<P><STRONG><a name="[1ee]"></a>FF_Seek</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ff_file.o(.text.FF_Seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = FF_Seek &rArr; FF_SetCluster &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FlushCache
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CheckValid
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SetCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Write
</UL>

<P><STRONG><a name="[1cf]"></a>FF_TraverseFAT</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, ff_fat.o(.text.FF_TraverseFAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockFAT
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockFAT
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getFATEntry
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Has_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Write
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindEndOfChain
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Traverse
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Truncate
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SetCluster
</UL>

<P><STRONG><a name="[1b3]"></a>FF_UnlinkClusterChain</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, ff_fat.o(.text.FF_UnlinkClusterChain))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = FF_UnlinkClusterChain &rArr; FF_IncreaseFreeClusters &rArr; FF_FindFreeCluster &rArr; FF_putFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_putFATEntry
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockFAT
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockFAT
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getFATEntry
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_IncreaseFreeClusters
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Has_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_RmFile
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateFile
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Truncate
</UL>

<P><STRONG><a name="[1af]"></a>FF_UnlockDirectory</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ff_locking.o(.text.FF_UnlockDirectory))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = FF_UnlockDirectory &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_RmFile
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateDirent
</UL>

<P><STRONG><a name="[19c]"></a>FF_UnlockFAT</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ff_locking.o(.text.FF_UnlockFAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = FF_UnlockFAT &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Write
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_RmFile
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlinkClusterChain
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_TraverseFAT
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetChainLength
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindFreeCluster
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ExtendDirectory
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_DecreaseFreeClusters
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateFile
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateClusterChain
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CountFreeClusters
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Mount
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Truncate
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SetCluster
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetSequentialClusters
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ExtendFile
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_IncreaseFreeClusters
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetFreeSize
</UL>

<P><STRONG><a name="[1e8]"></a>FF_Unmount</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ff_ioman.o(.text.FF_Unmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = FF_Unmount &rArr; FF_FlushCache &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseSemaphore
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PendSemaphore
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FlushCache
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SDDiskDelete
</UL>

<P><STRONG><a name="[1d1]"></a>FF_Utf16ctoUtf8c</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, ff_string.o(.text.FF_Utf16ctoUtf8c))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FF_Utf16ctoUtf8c
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PopulateLongDirent
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindEntryInDir
</UL>

<P><STRONG><a name="[1a8]"></a>FF_Utf8ctoUtf16c</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, ff_string.o(.text.FF_Utf8ctoUtf16c))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FF_Utf8ctoUtf16c
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateDirent
</UL>

<P><STRONG><a name="[1f1]"></a>FF_Write</STRONG> (Thumb, 770 bytes, Stack size 72 bytes, ff_file.o(.text.FF_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = FF_Write &rArr; FF_ExtendFile &rArr; FF_GetEntry &rArr; FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Seek
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getMinorBlockEntry
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockFAT
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_TraverseFAT
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockFAT
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Cluster2LBA
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CheckValid
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_WritePartial
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SetCluster
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetSequentialClusters
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ExtendFile
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getClusterPosition
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_BlockWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[1d0]"></a>FF_getChar</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ff_memory.o(.text.FF_getChar))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_RmLFNs
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PopulateShortDirent
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PopulateLongDirent
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetEntry
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindShortName
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindEntryInDir
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReadParts
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Mount
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PartitionSearch
</UL>

<P><STRONG><a name="[1f0]"></a>FF_getClusterChainNumber</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff_fat.o(.text.FF_getClusterChainNumber))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Traverse
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SetCluster
</UL>

<P><STRONG><a name="[1f3]"></a>FF_getClusterPosition</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff_fat.o(.text.FF_getClusterPosition))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Write
</UL>

<P><STRONG><a name="[1d7]"></a>FF_getFATEntry</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, ff_fat.o(.text.FF_getFATEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getShort
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getLong
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetFromFATBuffers
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Assert_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlinkClusterChain
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_TraverseFAT
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetChainLength
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetSequentialClusters
</UL>

<P><STRONG><a name="[19a]"></a>FF_getLong</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ff_memory.o(.text.FF_getLong))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PopulateShortDirent
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PopulateLongDirent
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindFreeCluster
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_DecreaseFreeClusters
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CountFreeClusters
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReadParts
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Mount
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PartitionSearch
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getFATEntry
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_IncreaseFreeClusters
</UL>

<P><STRONG><a name="[1c9]"></a>FF_getMajorBlockNumber</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ff_fat.o(.text.FF_getMajorBlockNumber))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PushEntryWithContext
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FetchEntryWithContext
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SetCluster
</UL>

<P><STRONG><a name="[1c7]"></a>FF_getMinorBlockEntry</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ff_fat.o(.text.FF_getMinorBlockEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FF_getMinorBlockEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Write
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PushEntryWithContext
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FetchEntryWithContext
</UL>

<P><STRONG><a name="[1ca]"></a>FF_getMinorBlockNumber</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ff_fat.o(.text.FF_getMinorBlockNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FF_getMinorBlockNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PushEntryWithContext
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FetchEntryWithContext
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SetCluster
</UL>

<P><STRONG><a name="[19b]"></a>FF_getShort</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ff_memory.o(.text.FF_getShort))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_putFATEntry
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PopulateShortDirent
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PopulateLongDirent
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindFreeCluster
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CountFreeClusters
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Mount
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PartitionSearch
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getFATEntry
</UL>

<P><STRONG><a name="[1ac]"></a>FF_putChar</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ff_memory.o(.text.FF_putChar))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_RmLFNs
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PutEntry
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateDirent
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateLFNEntry
</UL>

<P><STRONG><a name="[1bd]"></a>FF_putFATEntry</STRONG> (Thumb, 322 bytes, Stack size 56 bytes, ff_fat.o(.text.FF_putFATEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = FF_putFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_putShort
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_putLong
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getShort
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetFromFATBuffers
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Assert_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlinkClusterChain
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindFreeCluster
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ExtendDirectory
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ExtendFile
</UL>

<P><STRONG><a name="[1ae]"></a>FF_putLong</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ff_memory.o(.text.FF_putLong))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_putFATEntry
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PutEntry
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_DecreaseFreeClusters
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateDirent
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Mount
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_IncreaseFreeClusters
</UL>

<P><STRONG><a name="[1ad]"></a>FF_putShort</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ff_memory.o(.text.FF_putShort))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_RmFile
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_putFATEntry
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PutEntry
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateDirent
</UL>

<P><STRONG><a name="[1cc]"></a>FF_strmatch</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ff_string.o(.text.FF_strmatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FF_strmatch &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Open
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindDir
</UL>

<P><STRONG><a name="[1cd]"></a>FF_strtok</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, ff_string.o(.text.FF_strtok))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FF_strtok
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindDir
</UL>

<P><STRONG><a name="[1e3]"></a>FF_tolower</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ff_string.o(.text.FF_tolower))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PopulateShortDirent
</UL>

<P><STRONG><a name="[23a]"></a>FMC_SDRAM_Init</STRONG> (Thumb, 124 bytes, Stack size 28 bytes, stm32f4xx_ll_fmc.o(.text.FMC_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[1f5]"></a>FMC_SDRAM_SendCommand</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32f4xx_ll_fmc.o(.text.FMC_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[23b]"></a>FMC_SDRAM_Timing_Init</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32f4xx_ll_fmc.o(.text.FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FMC_SDRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[1f7]"></a>GT9XX_ReadReg</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hw_touch.o(.text.GT9XX_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GT9XX_ReadReg &rArr; Touch_IIC_ReadByte &rArr; Touch_IIC_NoACK
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_WriteByte
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_Stop
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_Start
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_ReadByte
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_WriteHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Scan
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Touch_Init
</UL>

<P><STRONG><a name="[1fd]"></a>GT9XX_Reset</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, hw_touch.o(.text.GT9XX_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = GT9XX_Reset &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Touch_Init
</UL>

<P><STRONG><a name="[200]"></a>GT9XX_WriteData</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, hw_touch.o(.text.GT9XX_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GT9XX_WriteData &rArr; GT9XX_WriteHandle &rArr; Touch_IIC_WriteByte &rArr; Touch_IIC_WaitACK
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_WriteByte
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_Stop
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_Start
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_WriteHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Scan
</UL>

<P><STRONG><a name="[1f9]"></a>GT9XX_WriteHandle</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hw_touch.o(.text.GT9XX_WriteHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GT9XX_WriteHandle &rArr; Touch_IIC_WriteByte &rArr; Touch_IIC_WaitACK
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_WriteByte
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_WriteData
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_ReadReg
</UL>

<P><STRONG><a name="[201]"></a>GUI_LCD_Init</STRONG> (Thumb, 576 bytes, Stack size 136 bytes, lcdconf_lin_template.o(.text.GUI_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = GUI_LCD_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_EnableDither
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[354]"></a>GUI_TOUCH_X_ActivateX</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x_touch_analog.o(.text.GUI_TOUCH_X_ActivateX))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
</UL>

<P><STRONG><a name="[359]"></a>GUI_TOUCH_X_ActivateY</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x_touch_analog.o(.text.GUI_TOUCH_X_ActivateY))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
</UL>

<P><STRONG><a name="[353]"></a>GUI_TOUCH_X_MeasureX</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_x_touch_analog.o(.text.GUI_TOUCH_X_MeasureX))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
</UL>

<P><STRONG><a name="[358]"></a>GUI_TOUCH_X_MeasureY</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_x_touch_analog.o(.text.GUI_TOUCH_X_MeasureY))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
</UL>

<P><STRONG><a name="[206]"></a>GUI_X_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, guiconf.o(.text.GUI_X_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_X_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDefaultFont
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_SetAvBlockSize
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AssignMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[20a]"></a>GUI_X_Delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_x_freertos.o(.text.GUI_X_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = GUI_X_Delay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
</UL>

<P><STRONG><a name="[6]"></a>GUI_X_ExecIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x_freertos.o(.text.GUI_X_ExecIdle))
<BR>[Address Reference Count : 1]<UL><LI> gui_waitevent.o(.data)
</UL>
<P><STRONG><a name="[20c]"></a>GUI_X_GetTaskId</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_x_freertos.o(.text.GUI_X_GetTaskId))
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[20d]"></a>GUI_X_GetTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_x_freertos.o(.text.GUI_X_GetTime))
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
</UL>

<P><STRONG><a name="[303]"></a>GUI_X_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x_freertos.o(.text.GUI_X_Init))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[20f]"></a>GUI_X_InitOS</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, gui_x_freertos.o(.text.GUI_X_InitOS))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Lock
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
</UL>

<P><STRONG><a name="[212]"></a>GUI_X_Lock</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_x_freertos.o(.text.GUI_X_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[214]"></a>GUI_X_Unlock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_x_freertos.o(.text.GUI_X_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = GUI_X_Unlock &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
</UL>

<P><STRONG><a name="[215]"></a>HAL_ADC_Init</STRONG> (Thumb, 308 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(.text.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_CPU_TEMP_Init
</UL>

<P><STRONG><a name="[216]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, hw_cpu_temp.o(.text.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[217]"></a>HAL_DMA2D_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_dma2d.o(.text.HAL_DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA2D_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[218]"></a>HAL_DMA2D_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_dma2d.o(.text.HAL_DMA2D_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
</UL>

<P><STRONG><a name="[219]"></a>HAL_DMA_Abort</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_CheckWriteOperation
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_CheckReadOperation
</UL>

<P><STRONG><a name="[2ad]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSDMMCInit
</UL>

<P><STRONG><a name="[172]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 364 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[2ae]"></a>HAL_DMA_Init</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSDMMCInit
</UL>

<P><STRONG><a name="[24f]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[21a]"></a>HAL_Delay</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32f4xx_sys.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = HAL_Delay &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[21b]"></a>HAL_FMC_MspInit</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, hw_sdram.o(.text.HAL_FMC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
</UL>

<P><STRONG><a name="[1fe]"></a>HAL_GPIO_Init</STRONG> (Thumb, 404 bytes, Stack size 44 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_LED_Init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_KEY_Init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_GPIO_Config
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_Reset
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSDMMCInit
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LCD_Init
</UL>

<P><STRONG><a name="[28a]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_WaitACK
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_ReadByte
</UL>

<P><STRONG><a name="[27f]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Task
</UL>

<P><STRONG><a name="[1ff]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPIFlash_Init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_LED_Init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_Init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_WriteByte
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_WaitACK
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_Stop
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_Start
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_ReadByte
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_NoACK
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_GPIO_Config
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_ACK
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_Reset
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LCD_Init
</UL>

<P><STRONG><a name="[1f6]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[287]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[21c]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = HAL_Init &rArr; HAL_MspInit &rArr; vPortDefineHeapRegions &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21e]"></a>HAL_InitTick</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[279]"></a>HAL_LTDC_ConfigCLUT</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32f4xx_hal_ltdc.o(.text.HAL_LTDC_ConfigCLUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_LTDC_ConfigCLUT
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[27c]"></a>HAL_LTDC_ConfigColorKeying</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_hal_ltdc.o(.text.HAL_LTDC_ConfigColorKeying))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[204]"></a>HAL_LTDC_ConfigLayer</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32f4xx_hal_ltdc.o(.text.HAL_LTDC_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LCD_Init
</UL>

<P><STRONG><a name="[27d]"></a>HAL_LTDC_DisableColorKeying</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f4xx_hal_ltdc.o(.text.HAL_LTDC_DisableColorKeying))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[27e]"></a>HAL_LTDC_EnableCLUT</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f4xx_hal_ltdc.o(.text.HAL_LTDC_EnableCLUT))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[27b]"></a>HAL_LTDC_EnableColorKeying</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f4xx_hal_ltdc.o(.text.HAL_LTDC_EnableColorKeying))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[205]"></a>HAL_LTDC_EnableDither</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_hal_ltdc.o(.text.HAL_LTDC_EnableDither))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LCD_Init
</UL>

<P><STRONG><a name="[226]"></a>HAL_LTDC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_ltdc.o(.text.HAL_LTDC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[224]"></a>HAL_LTDC_IRQHandler</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32f4xx_hal_ltdc.o(.text.HAL_LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_LTDC_IRQHandler &rArr; HAL_LTDC_LineEventCallback &rArr; HAL_LTDC_SetAddress &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ErrorCallback
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_IRQHandler
</UL>

<P><STRONG><a name="[203]"></a>HAL_LTDC_Init</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, stm32f4xx_hal_ltdc.o(.text.HAL_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_LTDC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LCD_Init
</UL>

<P><STRONG><a name="[225]"></a>HAL_LTDC_LineEventCallback</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lcdconf_lin_template.o(.text.HAL_LTDC_LineEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_LTDC_LineEventCallback &rArr; HAL_LTDC_SetAddress &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAddress
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ProgramLineEvent
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_ConfirmEx
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[227]"></a>HAL_LTDC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_ltdc.o(.text.HAL_LTDC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
</UL>

<P><STRONG><a name="[22a]"></a>HAL_LTDC_ProgramLineEvent</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f4xx_hal_ltdc.o(.text.HAL_LTDC_ProgramLineEvent))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[228]"></a>HAL_LTDC_SetAddress</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal_ltdc.o(.text.HAL_LTDC_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_LTDC_SetAddress &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[22b]"></a>HAL_LTDC_SetAlpha</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal_ltdc.o(.text.HAL_LTDC_SetAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_LTDC_SetAlpha &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[22c]"></a>HAL_LTDC_SetWindowPosition</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, stm32f4xx_hal_ltdc.o(.text.HAL_LTDC_SetWindowPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_LTDC_SetWindowPosition &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[21f]"></a>HAL_MspInit</STRONG> (Thumb, 306 bytes, Stack size 88 bytes, stm32f4xx_sys.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = HAL_MspInit &rArr; vPortDefineHeapRegions &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortDefineHeapRegions
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SDRAM_Init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[25c]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSDMMCInit
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[222]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSDMMCInit
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[21d]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[22e]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32f4xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[202]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 538 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LCD_Init
</UL>

<P><STRONG><a name="[22f]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 526 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[220]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[236]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[237]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[235]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[22d]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 708 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[238]"></a>HAL_SDRAM_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal_sdram.o(.text.HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SDRAM_Init
</UL>

<P><STRONG><a name="[239]"></a>HAL_SDRAM_MspInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hw_sdram.o(.text.HAL_SDRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[23c]"></a>HAL_SDRAM_SendCommand</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f4xx_hal_sdram.o(.text.HAL_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SDRAM_Init
</UL>

<P><STRONG><a name="[23d]"></a>HAL_SD_CheckReadOperation</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_CheckReadOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = HAL_SD_CheckReadOperation &rArr; HAL_SD_StopTransfer &rArr; SD_CmdResp1Error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_StopTransfer
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFFRead
</UL>

<P><STRONG><a name="[23f]"></a>HAL_SD_CheckWriteOperation</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_CheckWriteOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = HAL_SD_CheckWriteOperation &rArr; HAL_SD_StopTransfer &rArr; SD_CmdResp1Error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_StopTransfer
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetStatus
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFFWrite
</UL>

<P><STRONG><a name="[280]"></a>HAL_SD_DMA_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_DMA_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_RxCplt
</UL>

<P><STRONG><a name="[281]"></a>HAL_SD_DMA_RxErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_DMA_RxErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_RxError
</UL>

<P><STRONG><a name="[282]"></a>HAL_SD_DMA_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_DMA_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_TxCplt
</UL>

<P><STRONG><a name="[283]"></a>HAL_SD_DMA_TxErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_DMA_TxErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_TxError
</UL>

<P><STRONG><a name="[240]"></a>HAL_SD_GetStatus</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = HAL_SD_GetStatus &rArr; SD_CmdResp1Error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_CheckWriteOperation
</UL>

<P><STRONG><a name="[24d]"></a>HAL_SD_Get_CardInfo</STRONG> (Thumb, 636 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_Get_CardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SD_Get_CardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[244]"></a>HAL_SD_IRQHandler</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SD_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_XferErrorCallback
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_XferCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[247]"></a>HAL_SD_Init</STRONG> (Thumb, 1160 bytes, Stack size 80 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = HAL_SD_Init &rArr; HAL_Delay &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_PowerState_ON
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Get_CardInfo
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSDMMCInit
</UL>

<P><STRONG><a name="[248]"></a>HAL_SD_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[24e]"></a>HAL_SD_ReadBlocks_DMA</STRONG> (Thumb, 250 bytes, Stack size 80 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = HAL_SD_ReadBlocks_DMA &rArr; SD_CmdResp1Error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFFRead
</UL>

<P><STRONG><a name="[23e]"></a>HAL_SD_StopTransfer</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_StopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = HAL_SD_StopTransfer &rArr; SD_CmdResp1Error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_CheckWriteOperation
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_CheckReadOperation
</UL>

<P><STRONG><a name="[251]"></a>HAL_SD_WideBusOperation_Config</STRONG> (Thumb, 254 bytes, Stack size 64 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_WideBusOperation_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = HAL_SD_WideBusOperation_Config &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSDMMCInit
</UL>

<P><STRONG><a name="[253]"></a>HAL_SD_WriteBlocks_DMA</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = HAL_SD_WriteBlocks_DMA &rArr; SD_CmdResp1Error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFFWrite
</UL>

<P><STRONG><a name="[245]"></a>HAL_SD_XferCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_XferCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[246]"></a>HAL_SD_XferErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_XferErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[254]"></a>HAL_SPI_Init</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_Init
</UL>

<P><STRONG><a name="[255]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, hw_spiflash.o(.text.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[230]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[221]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[259]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[28d]"></a>HAL_UART_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[256]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 450 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[231]"></a>HAL_UART_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[25a]"></a>HAL_UART_MspInit</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, stm32f4xx_sys.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[232]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[257]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f4xx_sys.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[25d]"></a>HAL_UART_Transmit</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[258]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[25f]"></a>HW_CPU_TEMP_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, hw_cpu_temp.o(.text.HW_CPU_TEMP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HW_CPU_TEMP_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[260]"></a>HW_KEY_Init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, hw_key.o(.text.HW_KEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HW_KEY_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[261]"></a>HW_LED_Init</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, hw_led.o(.text.HW_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HW_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[233]"></a>HW_SDRAM_Init</STRONG> (Thumb, 250 bytes, Stack size 72 bytes, hw_sdram.o(.text.HW_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = HW_SDRAM_Init &rArr; HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[262]"></a>HW_SPIFlash_Init</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, hw_spiflash.o(.text.HW_SPIFlash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = HW_SPIFlash_Init &rArr; sFLASH_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[264]"></a>HW_Touch_Init</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, hw_touch.o(.text.HW_Touch_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = HW_Touch_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_GPIO_Config
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_Reset
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_ReadReg
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[267]"></a>LCD_X_Config</STRONG> (Thumb, 440 bytes, Stack size 24 bytes, lcdconf_lin_template.o(.text.LCD_X_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = LCD_X_Config &rArr; GUI_DEVICE_CreateAndLink &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ProgramLineEvent
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVSizeEx
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVRAMAddrEx
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetSizeEx
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDevFunc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Calibrate
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFuncMixColorsBulk
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFuncMixColors
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFuncGetpPalConvTable
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFuncAlphaBlending
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_ConfigEx
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LCD_Init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUICC_M888_SetCustColorConv
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUICC_M565_SetCustColorConv
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUICC_M4444I_SetCustColorConv
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUICC_M1555I_SetCustColorConv
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[278]"></a>LCD_X_DisplayDriver</STRONG> (Thumb, 710 bytes, Stack size 72 bytes, lcdconf_lin_template.o(.text.LCD_X_DisplayDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetWindowPosition
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAlpha
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAddress
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_EnableColorKeying
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_EnableCLUT
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_DisableColorKeying
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigColorKeying
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigCLUT
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetLayerPosEx
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowBuffer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVis
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVRAMAddr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSize
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetChromaMode
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetChroma
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAlphaMode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAlpha
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_On
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Off
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
</UL>

<P><STRONG><a name="[8e]"></a>LED_Task</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(.text.LED_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = LED_Task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.start_task)
</UL>
<P><STRONG><a name="[69]"></a>LTDC_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcdconf_lin_template.o(.text.LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LTDC_IRQHandler &rArr; HAL_LTDC_IRQHandler &rArr; HAL_LTDC_LineEventCallback &rArr; HAL_LTDC_SetAddress &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>PendSV_Handler</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, port.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; StartIdleMonitor &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[250]"></a>SDIO_DataConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(.text.SDIO_DataConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_DataConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[24c]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDIO_GetCommandResponse))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>

<P><STRONG><a name="[24b]"></a>SDIO_GetPowerState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[243]"></a>SDIO_GetResponse</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f4xx_ll_sdmmc.o(.text.SDIO_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WideBusOperation_Config
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetStatus
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>

<P><STRONG><a name="[43]"></a>SDIO_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ff_sddisk.o(.text.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = SDIO_IRQHandler &rArr; xQueueGiveFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[249]"></a>SDIO_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(.text.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WideBusOperation_Config
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[24a]"></a>SDIO_PowerState_ON</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDIO_PowerState_ON))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[284]"></a>SDIO_ReadFIFO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDIO_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[241]"></a>SDIO_SendCommand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(.text.SDIO_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WideBusOperation_Config
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_StopTransfer
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetStatus
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[e]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[285]"></a>StartIdleMonitor</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cpu_utils.o(.text.StartIdleMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = StartIdleMonitor &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[11]"></a>SysTick_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_sys.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>SystemInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[288]"></a>Touch_IIC_ACK</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, hw_touch.o(.text.Touch_IIC_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Touch_IIC_ACK
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_ReadByte
</UL>

<P><STRONG><a name="[265]"></a>Touch_IIC_GPIO_Config</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, hw_touch.o(.text.Touch_IIC_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Touch_IIC_GPIO_Config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Touch_Init
</UL>

<P><STRONG><a name="[289]"></a>Touch_IIC_NoACK</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, hw_touch.o(.text.Touch_IIC_NoACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Touch_IIC_NoACK
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_ReadByte
</UL>

<P><STRONG><a name="[1fb]"></a>Touch_IIC_ReadByte</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, hw_touch.o(.text.Touch_IIC_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Touch_IIC_ReadByte &rArr; Touch_IIC_NoACK
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_NoACK
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_ACK
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_ReadReg
</UL>

<P><STRONG><a name="[1f8]"></a>Touch_IIC_Start</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, hw_touch.o(.text.Touch_IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Touch_IIC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_WriteHandle
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_WriteData
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_ReadReg
</UL>

<P><STRONG><a name="[1fc]"></a>Touch_IIC_Stop</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, hw_touch.o(.text.Touch_IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Touch_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_WriteData
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_ReadReg
</UL>

<P><STRONG><a name="[28b]"></a>Touch_IIC_WaitACK</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, hw_touch.o(.text.Touch_IIC_WaitACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Touch_IIC_WaitACK
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_WriteByte
</UL>

<P><STRONG><a name="[1fa]"></a>Touch_IIC_WriteByte</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, hw_touch.o(.text.Touch_IIC_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Touch_IIC_WriteByte &rArr; Touch_IIC_WaitACK
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_WaitACK
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_WriteHandle
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_WriteData
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_ReadReg
</UL>

<P><STRONG><a name="[28c]"></a>Touch_Scan</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, hw_touch.o(.text.Touch_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Touch_Scan &rArr; GT9XX_WriteData &rArr; GT9XX_WriteHandle &rArr; Touch_IIC_WriteByte &rArr; Touch_IIC_WaitACK
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_WriteData
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_task
</UL>

<P><STRONG><a name="[37]"></a>USART1_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_sys.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[14b]"></a>_sys_close</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, clib_redef.o(.text._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
<LI>Call Chain = _sys_close &rArr; FF_Close &rArr; FF_Truncate &rArr; FF_GetEntry &rArr; FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[12d]"></a>_sys_exit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, clib_redef.o(.text._sys_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = _sys_exit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[140]"></a>_sys_flen</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, clib_redef.o(.text._sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_flen
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_BytesLeft
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[13e]"></a>_sys_istty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clib_redef.o(.text._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[146]"></a>_sys_open</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, clib_redef.o(.text._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 2896 + Unknown Stack Size
<LI>Call Chain = _sys_open &rArr; FF_Open &rArr; FF_CreateFile &rArr; FF_CreateDirent &rArr; FF_FindShortName &rArr; FF_FindEntryInDir &rArr; FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvABSPath
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Open
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FS_Find
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[161]"></a>_sys_seek</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, clib_redef.o(.text._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = _sys_seek &rArr; FF_Seek &rArr; FF_SetCluster &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFFErrorToErrno
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Seek
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[14d]"></a>_sys_tmpnam</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, clib_redef.o(.text._sys_tmpnam))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[162]"></a>_sys_write</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, clib_redef.o(.text._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = _sys_write &rArr; FF_Write &rArr; FF_ExtendFile &rArr; FF_GetEntry &rArr; FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[16b]"></a>_ttywrch</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, clib_redef.o(.text._ttywrch))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _ttywrch &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[182]"></a>delay_ms</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32f4xx_sys.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
</UL>

<P><STRONG><a name="[14c]"></a>free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, clib_redef.o(.text.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[128]"></a>main</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Touch_Init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPIFlash_Init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_LED_Init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_KEY_Init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_CPU_TEMP_Init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[148]"></a>malloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, clib_redef.o(.text.malloc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[291]"></a>prvABSPath</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, ff_stdio.o(.text.prvABSPath))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = prvABSPath &rArr; pxFindCWD &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxFindCWD
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[292]"></a>prvFFErrorToErrno</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ff_stdio.o(.text.prvFFErrorToErrno))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = prvFFErrorToErrno &rArr; vTaskSetThreadLocalStoragePointer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetThreadLocalStoragePointer
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[1f4]"></a>prvGetFromFATBuffers</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ff_fat.o(.text.prvGetFromFATBuffers))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_putFATEntry
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getFATEntry
</UL>

<P><STRONG><a name="[1b5]"></a>pvPortMalloc</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, heap_5.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SDDiskInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Open
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateIOManger
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxFindCWD
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFFWrite
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFFRead
</UL>

<P><STRONG><a name="[2b7]"></a>pvTaskGetThreadLocalStoragePointer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(.text.pvTaskGetThreadLocalStoragePointer))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxFindCWD
</UL>

<P><STRONG><a name="[2cc]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[2a9]"></a>pxPortInitialiseStack</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[14e]"></a>remove</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, clib_redef.o(.text.remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 2952 + Unknown Stack Size
<LI>Call Chain = remove &rArr; FF_RmFile &rArr; FF_Open &rArr; FF_CreateFile &rArr; FF_CreateDirent &rArr; FF_FindShortName &rArr; FF_FindEntryInDir &rArr; FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFFErrorToErrno
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvABSPath
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_RmFile
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FS_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[263]"></a>sFLASH_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, hw_spiflash.o(.text.sFLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = sFLASH_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPIFlash_Init
</UL>

<P><STRONG><a name="[88]"></a>start_task</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, main.o(.text.start_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = start_task &rArr; FAT_Init &rArr; FF_SDDiskInit &rArr; FF_SDDiskMount &rArr; FF_Mount &rArr; FF_PartitionSearch &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[1d2]"></a>strcasecmp</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ff_dir.o(.text.strcasecmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindEntryInDir
</UL>

<P><STRONG><a name="[8c]"></a>touch_task</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.touch_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = touch_task &rArr;  touch_task (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_task
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Scan
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.start_task)
</UL>
<P><STRONG><a name="[297]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(.text.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[2c4]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(.text.uxTaskResetEventItemValue))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[2c0]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_sys.o(.text.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[2cf]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_sys.o(.text.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[2a6]"></a>vApplicationIdleHook</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cpu_utils.o(.text.vApplicationIdleHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vApplicationIdleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[2b6]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_sys.o(.text.vApplicationMallocFailedHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vApplicationMallocFailedHook &rArr; puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[2ce]"></a>vApplicationTickHook</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, cpu_utils.o(.text.vApplicationTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[1bb]"></a>vEventGroupDelete</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, event_groups.o(.text.vEventGroupDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = vEventGroupDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_DeleteEvents
</UL>

<P><STRONG><a name="[29b]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(.text.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[2a8]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[299]"></a>vListInsert</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>

<P><STRONG><a name="[298]"></a>vListInsertEnd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, list.o(.text.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[234]"></a>vPortDefineHeapRegions</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, heap_5.o(.text.vPortDefineHeapRegions))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = vPortDefineHeapRegions &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[1b8]"></a>vPortEnterCritical</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = vPortEnterCritical &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_DecreaseFreeClusters
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_IncreaseFreeClusters
</UL>

<P><STRONG><a name="[1b9]"></a>vPortExitCritical</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = vPortExitCritical &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_DecreaseFreeClusters
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_IncreaseFreeClusters
</UL>

<P><STRONG><a name="[194]"></a>vPortFree</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, heap_5.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Open
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Close
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_DeleteIOManager
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SDDiskDelete
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFFWrite
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFFRead
</UL>

<P><STRONG><a name="[2c5]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, port.o(.text.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[2bb]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, port.o(.text.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = vPortValidateInterruptPriority &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
</UL>

<P><STRONG><a name="[29e]"></a>vQueueAddToRegistry</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, queue.o(.text.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[2b1]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, queue.o(.text.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[20b]"></a>vTaskDelay</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tasks.o(.text.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_task
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Task
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Delay
</UL>

<P><STRONG><a name="[2b8]"></a>vTaskDelete</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, tasks.o(.text.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[2ca]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(.text.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2b4]"></a>vTaskMissedYield</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[2bd]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tasks.o(.text.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = vTaskPlaceOnEventList &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2bc]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tasks.o(.text.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[2be]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tasks.o(.text.vTaskPlaceOnUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = vTaskPlaceOnUnorderedEventList &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[2bf]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, tasks.o(.text.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[2ba]"></a>vTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tasks.o(.text.vTaskRemoveFromUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = vTaskRemoveFromUnorderedEventList &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
</UL>

<P><STRONG><a name="[2a4]"></a>vTaskSetThreadLocalStoragePointer</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tasks.o(.text.vTaskSetThreadLocalStoragePointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = vTaskSetThreadLocalStoragePointer &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFFErrorToErrno
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxFindCWD
</UL>

<P><STRONG><a name="[2a2]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tasks.o(.text.vTaskSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = vTaskSetTimeOutState &rArr; vPortExitCritical &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEventSetupFunction
</UL>

<P><STRONG><a name="[294]"></a>vTaskStartScheduler</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, tasks.o(.text.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartIdleMonitor
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c2]"></a>vTaskSuspendAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FS_Add
</UL>

<P><STRONG><a name="[110]"></a>vTaskSwitchContext</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = vTaskSwitchContext &rArr; StartIdleMonitor &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartIdleMonitor
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndIdleMonitor
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1db]"></a>xEventGroupClearBits</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, event_groups.o(.text.xEventGroupClearBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = xEventGroupClearBits &rArr; vPortExitCritical &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockFAT
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockDirectory
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockFAT
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockDirectory
</UL>

<P><STRONG><a name="[1b1]"></a>xEventGroupCreate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, event_groups.o(.text.xEventGroupCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateEvents
</UL>

<P><STRONG><a name="[189]"></a>xEventGroupSetBits</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, event_groups.o(.text.xEventGroupSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockFAT
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockDirectory
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateEvents
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_BufferProceed
</UL>

<P><STRONG><a name="[18b]"></a>xEventGroupWaitBits</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, event_groups.o(.text.xEventGroupWaitBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockFAT
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockDirectory
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_BufferWait
</UL>

<P><STRONG><a name="[2c3]"></a>xPortStartScheduler</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, port.o(.text.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = xPortStartScheduler &rArr; vTaskSwitchContext &rArr; StartIdleMonitor &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnableVFP
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPortStartFirstTask
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[286]"></a>xPortSysTickHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(.text.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1ea]"></a>xQueueCreateMutex</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, queue.o(.text.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SDDiskInit
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
</UL>

<P><STRONG><a name="[210]"></a>xQueueGenericCreate</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, queue.o(.text.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSDMMCInit
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
</UL>

<P><STRONG><a name="[29d]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, queue.o(.text.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = xQueueGenericCreateStatic &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[2c9]"></a>xQueueGenericReset</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, queue.o(.text.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[211]"></a>xQueueGenericSend</STRONG> (Thumb, 472 bytes, Stack size 56 bytes, queue.o(.text.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Unlock
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
</UL>

<P><STRONG><a name="[2cb]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, queue.o(.text.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[173]"></a>xQueueGiveFromISR</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, queue.o(.text.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = xQueueGiveFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[1e4]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, queue.o(.text.xQueueGiveMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseSemaphore
</UL>

<P><STRONG><a name="[2b2]"></a>xQueueReceive</STRONG> (Thumb, 402 bytes, Stack size 48 bytes, queue.o(.text.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[213]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 470 bytes, Stack size 48 bytes, queue.o(.text.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEventWaitFunction
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Lock
</UL>

<P><STRONG><a name="[1e1]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, queue.o(.text.xQueueTakeMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PendSemaphore
</UL>

<P><STRONG><a name="[2a3]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tasks.o(.text.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEventWaitFunction
</UL>

<P><STRONG><a name="[293]"></a>xTaskCreate</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c1]"></a>xTaskCreateStatic</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, tasks.o(.text.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = xTaskCreateStatic &rArr; prvAddNewTaskToReadyList &rArr; vPortExitCritical &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[17e]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockFAT
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartIdleMonitor
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndIdleMonitor
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Has_Lock
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Assert_Lock
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
</UL>

<P><STRONG><a name="[184]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockFAT
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockDirectory
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseSemaphore
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PendSemaphore
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockFAT
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockDirectory
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_BufferWait
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_BufferProceed
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Has_Lock
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Assert_Lock
</UL>

<P><STRONG><a name="[20e]"></a>xTaskGetTickCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_CheckWriteOperation
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_CheckReadOperation
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
</UL>

<P><STRONG><a name="[17f]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(.text.xTaskGetTickCountFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartIdleMonitor
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndIdleMonitor
</UL>

<P><STRONG><a name="[2c8]"></a>xTaskIncrementTick</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2a0]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, tasks.o(.text.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[2cd]"></a>xTaskPriorityInherit</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, tasks.o(.text.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[2ac]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, tasks.o(.text.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = xTaskRemoveFromEventList &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[1c4]"></a>xTaskResumeAll</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FS_Add
</UL>

<P><STRONG><a name="[2c2]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, timers.o(.text.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[2b0]"></a>xTimerGenericCommand</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, timers.o(.text.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[2d0]"></a>GL_SetDefault</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, gui_common.o(i.GL_SetDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = GL_SetDefault &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
</UL>

<P><STRONG><a name="[270]"></a>GUICC_M1555I_SetCustColorConv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guicc_m1555i.o(i.GUICC_M1555I_SetCustColorConv))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[272]"></a>GUICC_M4444I_SetCustColorConv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guicc_m4444i.o(i.GUICC_M4444I_SetCustColorConv))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[271]"></a>GUICC_M565_SetCustColorConv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guicc_m565.o(i.GUICC_M565_SetCustColorConv))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[273]"></a>GUICC_M888_SetCustColorConv</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, guicc_m888.o(i.GUICC_M888_SetCustColorConv))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[e2]"></a>GUIMONO_DispChar</STRONG> (Thumb, 306 bytes, Stack size 72 bytes, gui_charm.o(i.GUIMONO_DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GUIMONO_DispChar &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>GUIMONO_GetCharDistX</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_charm.o(i.GUIMONO_GetCharDistX))
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>GUIMONO_GetFontInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_charm.o(i.GUIMONO_GetFontInfo))
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>GUIMONO_IsInFont</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gui_charm.o(i.GUIMONO_IsInFont))
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>GUIPROP_DispChar</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, gui_charp.o(i.GUIPROP_DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = GUIPROP_DispChar &rArr; GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> f16_1.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>GUIPROP_GetCharDistX</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, gui_charp.o(i.GUIPROP_GetCharDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GUIPROP_GetCharDistX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> f16_1.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>GUIPROP_GetFontInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_charp.o(i.GUIPROP_GetFontInfo))
<BR>[Address Reference Count : 1]<UL><LI> f16_1.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>GUIPROP_IsInFont</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gui_charp.o(i.GUIPROP_IsInFont))
<BR>[Address Reference Count : 1]<UL><LI> f16_1.o(.constdata)
</UL>
<P><STRONG><a name="[2d9]"></a>GUITASK_CopyContext</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, gui_task.o(i.GUITASK_CopyContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUITASK_CopyContext &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[2da]"></a>GUITASK_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, gui_task.o(i.GUITASK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = GUITASK_Init &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[2dd]"></a>GUI_ALLOC_AllocNoInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gui_alloc.o(i.GUI_ALLOC_AllocNoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateBuffer
</UL>

<P><STRONG><a name="[2df]"></a>GUI_ALLOC_AllocZero</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, gui_alloc.o(i.GUI_ALLOC_AllocZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_AllocZero &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[207]"></a>GUI_ALLOC_AssignMemory</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_AssignMemory))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
</UL>

<P><STRONG><a name="[2e0]"></a>GUI_ALLOC_Free</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gui_alloc.o(i.GUI_ALLOC_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GUI_USAGE_BM_Delete
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReleaseBuffer
</UL>

<P><STRONG><a name="[2f1]"></a>GUI_ALLOC_FreeFixedBlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_FreeFixedBlock))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
</UL>

<P><STRONG><a name="[2dc]"></a>GUI_ALLOC_GetFixedBlock</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, gui_alloc.o(i.GUI_ALLOC_GetFixedBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Create
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowBuffer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVis
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVSize
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVRAMAddr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSize
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDevFunc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAlpha
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPos
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyBuffer
</UL>

<P><STRONG><a name="[2e5]"></a>GUI_ALLOC_GetMaxSize</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gui_alloc.o(i.GUI_ALLOC_GetMaxSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_GetMaxSize &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateBuffer
</UL>

<P><STRONG><a name="[2f3]"></a>GUI_ALLOC_Lock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
</UL>

<P><STRONG><a name="[310]"></a>GUI_ALLOC_LockH</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_LockH))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendTouchMessage
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAt
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetNextTimerLin
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetFirstTimer
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbPaintMemDev
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateBuffer
</UL>

<P><STRONG><a name="[2e6]"></a>GUI_ALLOC_RequestSize</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, gui_alloc.o(i.GUI_ALLOC_RequestSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_RequestSize &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[208]"></a>GUI_ALLOC_SetAvBlockSize</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_SetAvBlockSize))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
</UL>

<P><STRONG><a name="[2f4]"></a>GUI_ALLOC_Unlock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
</UL>

<P><STRONG><a name="[311]"></a>GUI_ALLOC_UnlockH</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_UnlockH))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendTouchMessage
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAt
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetNextTimerLin
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetFirstTimer
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbPaintMemDev
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReleaseBuffer
</UL>

<P><STRONG><a name="[331]"></a>GUI_ALLOC_h2p</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_h2p))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageIfEnabled
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsAncestor
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageNoPara
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgX
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsWindow
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateParent
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>

<P><STRONG><a name="[2e7]"></a>GUI_CURSOR_SetPositionEx</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, gui_cursor.o(i.GUI_CURSOR_SetPositionEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = GUI_CURSOR_SetPositionEx &rArr; GUI_SPRITE_SetPosition &rArr; _CreateBuffer &rArr; GUI_ALLOC_GetMaxSize &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerPosEx
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCursorLayer
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[3af]"></a>GUI_CalcColorDist</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, gui_common.o(i.GUI_CalcColorDist))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
</UL>

<P><STRONG><a name="[17a]"></a>GUI_Clear</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, gui_core.o(i.GUI_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = GUI_Clear &rArr; GUI_GotoXY &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMWin_MainTask
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[33d]"></a>GUI_DCACHE_Clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_core.o(i.GUI_DCACHE_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_EndEx
</UL>

<P><STRONG><a name="[2ee]"></a>GUI_DEVICE_Create</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gui_device.o(i.GUI_DEVICE_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[269]"></a>GUI_DEVICE_CreateAndLink</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gui_device.o(i.GUI_DEVICE_CreateAndLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = GUI_DEVICE_CreateAndLink &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[2f0]"></a>GUI_DEVICE_Delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_device.o(i.GUI_DEVICE_Delete))
<BR><BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
</UL>

<P><STRONG><a name="[2ef]"></a>GUI_DEVICE_Link</STRONG> (Thumb, 156 bytes, Stack size 4 bytes, gui_device.o(i.GUI_DEVICE_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GUI_DEVICE_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[30e]"></a>GUI_DEVICE_LinkDevices</STRONG> (Thumb, 154 bytes, Stack size 12 bytes, gui_device.o(i.GUI_DEVICE_LinkDevices))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GUI_DEVICE_LinkDevices
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[371]"></a>GUI_DEVICE_Unlink</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gui_device.o(i.GUI_DEVICE_Unlink))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
</UL>

<P><STRONG><a name="[30d]"></a>GUI_DEVICE_UnlinkTaskDevices</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_device.o(i.GUI_DEVICE_UnlinkTaskDevices))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[31b]"></a>GUI_DEVICE__GetpDriver</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gui_device.o(i.GUI_DEVICE__GetpDriver))
<BR><BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeMax
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVSizeEx
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVRAMAddrEx
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetSizeEx
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDevFunc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVYSizeEx
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeEx
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorYEx
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorXEx
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLUTEntryEx
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumLayers
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColorsEx
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeEx
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeEx
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPosEx
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPosEx
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_EndEx
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_BeginEx
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeMax
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeMax
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCacheEx
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateBuffer
</UL>

<P><STRONG><a name="[177]"></a>GUI_Delay</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, gui_time.o(i.GUI_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = GUI_Delay &rArr; GUI_Exec &rArr; WM_Exec &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Delay
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMWIN_task
</UL>

<P><STRONG><a name="[17c]"></a>GUI_DispString</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, gui_dispstring.o(i.GUI_DispString))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMWin_MainTask
</UL>

<P><STRONG><a name="[2f2]"></a>GUI_Exec</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, gui_common.o(i.GUI_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = GUI_Exec &rArr; WM_Exec &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
</UL>

<P><STRONG><a name="[346]"></a>GUI_GetBitmapPixelIndex</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, gui_common.o(i.GUI_GetBitmapPixelIndex))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBkIndexAlpha
</UL>

<P><STRONG><a name="[336]"></a>GUI_GetBitsPerPixelEx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd_getex.o(i.GUI_GetBitsPerPixelEx))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRectEx
</UL>

<P><STRONG><a name="[2d8]"></a>GUI_GetBkColor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_common.o(i.GUI_GetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = GUI_GetBkColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBkColorIndex
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[2fe]"></a>GUI_GetCharDistX</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_char.o(i.GUI_GetCharDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
</UL>

<P><STRONG><a name="[2ff]"></a>GUI_GetCharDistXEx</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_char.o(i.GUI_GetCharDistXEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
</UL>

<P><STRONG><a name="[2d7]"></a>GUI_GetColor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_common.o(i.GUI_GetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetColorIndex
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[2e8]"></a>GUI_GetCursorLayer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_selectlayer.o(i.GUI_GetCursorLayer))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPositionEx
</UL>

<P><STRONG><a name="[16d]"></a>GUI_GetDrawMode</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_common.o(i.GUI_GetDrawMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = GUI_GetDrawMode &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_FillRect
</UL>

<P><STRONG><a name="[2f5]"></a>GUI_GetFontDistY</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gui_char.o(i.GUI_GetFontDistY))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = GUI_GetFontDistY &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[27a]"></a>GUI_GetLayerPosEx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gui_selectlayer.o(i.GUI_GetLayerPosEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = GUI_GetLayerPosEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPosEx
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[302]"></a>GUI_GetOrg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_common.o(i.GUI_GetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = GUI_GetOrg &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[2f6]"></a>GUI_GetYAdjust</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gui_char.o(i.GUI_GetYAdjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = GUI_GetYAdjust &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[338]"></a>GUI_GetpfColor2IndexEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(i.GUI_GetpfColor2IndexEx))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[337]"></a>GUI_GetpfIndex2ColorEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(i.GUI_GetpfIndex2ColorEx))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[2eb]"></a>GUI_GotoXY</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_common.o(i.GUI_GotoXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = GUI_GotoXY &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
</UL>

<P><STRONG><a name="[174]"></a>GUI_Init</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, gui_core.o(i.GUI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = GUI_Init &rArr; WM_Init &rArr; WM_CreateWindowAsChild &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplaySize
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeMax
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeDisplay
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeMax
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeDisplay
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetOrg
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMWIN_task
</UL>

<P><STRONG><a name="[2d1]"></a>GUI_Lock</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, gui_task.o(i.GUI_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Lock
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_UnlinkTaskDevices
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_LinkDevices
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetLayerPosEx
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetDrawMode
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerPosEx
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetOrg
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetOrg
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ReleaseCapture
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPositionEx
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgX
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[30f]"></a>GUI_MEMDEV_Clear</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, guidev_clear.o(i.GUI_MEMDEV_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Clear &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[312]"></a>GUI_MEMDEV_CopyToLCD</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev.o(i.GUI_MEMDEV_CopyToLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[313]"></a>GUI_MEMDEV_CopyToLCDAt</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, guidev.o(i.GUI_MEMDEV_CopyToLCDAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Activate
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCD
</UL>

<P><STRONG><a name="[31a]"></a>GUI_MEMDEV_CreateEx</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, guidev.o(i.GUI_MEMDEV_CreateEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[31d]"></a>GUI_MEMDEV_Delete</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, guidev.o(i.GUI_MEMDEV_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Delete &rArr; GUI_USAGE_DecUseCnt &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[31f]"></a>GUI_MEMDEV_Draw</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, guidev_banding.o(i.GUI_MEMDEV_Draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVYSizeEx
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeEx
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeEx
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeEx
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetOrg
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCD
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageNoPara
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[329]"></a>GUI_MEMDEV_GetBitsPerPixel</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, guidev.o(i.GUI_MEMDEV_GetBitsPerPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_GetBitsPerPixel &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPPDevice
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[32b]"></a>GUI_MEMDEV_GetDataPtr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, guidev_getdataptr.o(i.GUI_MEMDEV_GetDataPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_GetDataPtr &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
</UL>

<P><STRONG><a name="[324]"></a>GUI_MEMDEV_GetYSize</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, guidev_getysize.o(i.GUI_MEMDEV_GetYSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_GetYSize &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[9e]"></a>GUI_MEMDEV_Paint1Static</STRONG> (Thumb, 358 bytes, Stack size 56 bytes, guidev_staticdevices.o(i.GUI_MEMDEV_Paint1Static))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Paint1Static &rArr; WM_SetSize &rArr; WM_ResizeWindow &rArr; WM__UpdateChildPositions &rArr;  WM_ResizeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AlphaPreserveTrans
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgX
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wm.o(i.WM__PaintWinAndOverlays)
<LI> wm.o(i._PaintTransChildren)
</UL>
<P><STRONG><a name="[327]"></a>GUI_MEMDEV_ReduceYSize</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, guidev_reduceysize.o(i.GUI_MEMDEV_ReduceYSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_ReduceYSize &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[326]"></a>GUI_MEMDEV_Select</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, guidev.o(i.GUI_MEMDEV_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Select &rArr; GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[328]"></a>GUI_MEMDEV_SetOrg</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, guidev_setorg.o(i.GUI_MEMDEV_SetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_SetOrg &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[332]"></a>GUI_MEMDEV_Write</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, guidev_write.o(i.GUI_MEMDEV_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Write &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAt
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[31c]"></a>GUI_MEMDEV__CreateFixed</STRONG> (Thumb, 258 bytes, Stack size 64 bytes, guidev.o(i.GUI_MEMDEV__CreateFixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV__CreateFixed &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPPDevice
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Create
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[b1]"></a>GUI_MEMDEV__WriteToActiveAlpha</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, guidev_writetoactivealpha.o(i.GUI_MEMDEV__WriteToActiveAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV__WriteToActiveAlpha &rArr; _WriteToActiveAlpha &rArr; GUI__DoAlphaBlending &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[333]"></a>GUI_MEMDEV__WriteToActiveAt</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, guidev.o(i.GUI_MEMDEV__WriteToActiveAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_MEMDEV__WriteToActiveAt
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
</UL>

<P><STRONG><a name="[b0]"></a>GUI_MEMDEV__WriteToActiveOpaque</STRONG> (Thumb, 2070 bytes, Stack size 168 bytes, guidev_writetoactiveopaque.o(i.GUI_MEMDEV__WriteToActiveOpaque))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV__WriteToActiveOpaque &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfIndex2ColorEx
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfColor2IndexEx
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__DrawBitmap_1bpp
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndices
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[33b]"></a>GUI_MULTIBUF_BeginEx</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, gui_multibuf.o(i.GUI_MULTIBUF_BeginEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_MULTIBUF_BeginEx
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MULTIBUF_Begin
</UL>

<P><STRONG><a name="[268]"></a>GUI_MULTIBUF_ConfigEx</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gui_multibuf.o(i.GUI_MULTIBUF_ConfigEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_MULTIBUF_ConfigEx
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[229]"></a>GUI_MULTIBUF_ConfirmEx</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gui_multibuf.o(i.GUI_MULTIBUF_ConfirmEx))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[33c]"></a>GUI_MULTIBUF_EndEx</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, gui_multibuf.o(i.GUI_MULTIBUF_EndEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_MULTIBUF_EndEx
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DCACHE_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MULTIBUF_End
</UL>

<P><STRONG><a name="[39f]"></a>GUI_MergeRect</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, gui_common.o(i.GUI_MergeRect))
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>

<P><STRONG><a name="[397]"></a>GUI_MoveRect</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gui_common.o(i.GUI_MoveRect))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[38b]"></a>GUI_PID_GetState</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, gui_pid.o(i.GUI_PID_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GUI_PID_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[38a]"></a>GUI_PID_IsEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_pid.o(i.GUI_PID_IsEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[33e]"></a>GUI_PID_StoreState</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, gui_pid.o(i.GUI_PID_StoreState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_PID_StoreState
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_StoreStateEx
</UL>

<P><STRONG><a name="[340]"></a>GUI_PollKeyMsg</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gui_onkey.o(i.GUI_PollKeyMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = GUI_PollKeyMsg &rArr; WM_OnKey &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[342]"></a>GUI_ReadRectEx</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lcd_readrect.o(i.GUI_ReadRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GUI_ReadRectEx &rArr; LCD_ReadRectEx
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
</UL>

<P><STRONG><a name="[35f]"></a>GUI_RectsIntersect</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gui_common.o(i.GUI_RectsIntersect))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>

<P><STRONG><a name="[344]"></a>GUI_RestoreContext</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_common.o(i.GUI_RestoreContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_RestoreContext &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[2ea]"></a>GUI_SPRITE_SetPosition</STRONG> (Thumb, 1362 bytes, Stack size 232 bytes, gui_sprite.o(i.GUI_SPRITE_SetPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = GUI_SPRITE_SetPosition &rArr; _CreateBuffer &rArr; GUI_ALLOC_GetMaxSize &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeEx
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeEx
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitmapPixelIndex
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBkIndexBuffered
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReleaseBuffer
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBkIndexAlpha
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPositionEx
</UL>

<P><STRONG><a name="[34a]"></a>GUI_SaveContext_W</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_common.o(i.GUI_SaveContext_W))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_SaveContext_W &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[316]"></a>GUI_SelectLCD</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gui_common.o(i.GUI_SelectLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Activate
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
</UL>

<P><STRONG><a name="[26a]"></a>GUI_SelectLayer</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gui_selectlayer.o(i.GUI_SelectLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = GUI_SelectLayer &rArr; GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
</UL>

<P><STRONG><a name="[179]"></a>GUI_SetBkColor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gui_common.o(i.GUI_SetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = GUI_SetBkColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMWin_MainTask
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[178]"></a>GUI_SetColor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gui_common.o(i.GUI_SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMWin_MainTask
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[209]"></a>GUI_SetDefaultFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_core.o(i.GUI_SetDefaultFont))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
</UL>

<P><STRONG><a name="[314]"></a>GUI_SetDrawMode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_common.o(i.GUI_SetDrawMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = GUI_SetDrawMode &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[17b]"></a>GUI_SetFont</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gui_common.o(i.GUI_SetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = GUI_SetFont &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMWin_MainTask
</UL>

<P><STRONG><a name="[274]"></a>GUI_SetFuncAlphaBlending</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui__alpha.o(i.GUI_SetFuncAlphaBlending))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[275]"></a>GUI_SetFuncGetpPalConvTable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_core.o(i.GUI_SetFuncGetpPalConvTable))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[276]"></a>GUI_SetFuncMixColors</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui__alpha.o(i.GUI_SetFuncMixColors))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[277]"></a>GUI_SetFuncMixColorsBulk</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui__alpha.o(i.GUI_SetFuncMixColorsBulk))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[2e9]"></a>GUI_SetLayerPosEx</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gui_selectlayer.o(i.GUI_SetLayerPosEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = GUI_SetLayerPosEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPosEx
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPositionEx
</UL>

<P><STRONG><a name="[30b]"></a>GUI_SetOrg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gui_common.o(i.GUI_SetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = GUI_SetOrg &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[33f]"></a>GUI_SignalEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_waitevent.o(i.GUI_SignalEvent))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_StoreState
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>

<P><STRONG><a name="[34d]"></a>GUI_StoreKey</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_onkey.o(i.GUI_StoreKey))
<BR><BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[34e]"></a>GUI_TIMER_Delete</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, gui_timer.o(i.GUI_TIMER_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = GUI_TIMER_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[34f]"></a>GUI_TIMER_GetFlag</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gui_timer.o(i.GUI_TIMER_GetFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = GUI_TIMER_GetFlag &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[350]"></a>GUI_TIMER__GetFirstTimer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui_timer.o(i.GUI_TIMER__GetFirstTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_TIMER__GetFirstTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[351]"></a>GUI_TIMER__GetNextTimerLin</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gui_timer.o(i.GUI_TIMER__GetNextTimerLin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_TIMER__GetNextTimerLin
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[352]"></a>GUI_TOUCH_CalcCoefficients</STRONG> (Thumb, 1434 bytes, Stack size 156 bytes, gui_touch_calibrate.o(i.GUI_TOUCH_CalcCoefficients))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = GUI_TOUCH_CalcCoefficients
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Calibrate
</UL>

<P><STRONG><a name="[26d]"></a>GUI_TOUCH_Calibrate</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, gui_touch_driveranalog.o(i.GUI_TOUCH_Calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = GUI_TOUCH_Calibrate &rArr; GUI_TOUCH_CalcCoefficients
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeEx
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeEx
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_CalcCoefficients
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[356]"></a>GUI_TOUCH_CalibratePoint</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, gui_touch_calibrate.o(i.GUI_TOUCH_CalibratePoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_TOUCH_CalibratePoint
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
</UL>

<P><STRONG><a name="[2b9]"></a>GUI_TOUCH_Exec</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, gui_touch_driveranalog.o(i.GUI_TOUCH_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GUI_TOUCH_Exec &rArr; GUI_TOUCH_StoreStateEx &rArr; GUI_PID_StoreState
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_X_MeasureY
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_X_MeasureX
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_X_ActivateY
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_X_ActivateX
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_StoreStateEx
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_GetLayer
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_CalibratePoint
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_task
</UL>

<P><STRONG><a name="[355]"></a>GUI_TOUCH_GetLayer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_touch_storestate.o(i.GUI_TOUCH_GetLayer))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
</UL>

<P><STRONG><a name="[357]"></a>GUI_TOUCH_StoreStateEx</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, gui_touch.o(i.GUI_TOUCH_StoreStateEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI_TOUCH_StoreStateEx &rArr; GUI_PID_StoreState
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_StoreState
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
</UL>

<P><STRONG><a name="[361]"></a>GUI_UC__GetCharCodeInc</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, gui_uc.o(i.GUI_UC__GetCharCodeInc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
</UL>

<P><STRONG><a name="[2fa]"></a>GUI_UC__NumChars2NumBytes</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, gui_uc.o(i.GUI_UC__NumChars2NumBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_UC__NumChars2NumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[3b1]"></a>GUI_USAGE_AddRect</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, guidev_usage.o(i.GUI_USAGE_AddRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_USAGE_AddRect
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[334]"></a>GUI_USAGE_BM_Create</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, guidev_usagebm.o(i.GUI_USAGE_BM_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[31e]"></a>GUI_USAGE_DecUseCnt</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, guidev_usage.o(i.GUI_USAGE_DecUseCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = GUI_USAGE_DecUseCnt &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
</UL>

<P><STRONG><a name="[2d3]"></a>GUI_Unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_task.o(i.GUI_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = GUI_Unlock &rArr; GUI_X_Unlock &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetLayerPosEx
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetDrawMode
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerPosEx
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetOrg
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetOrg
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ReleaseCapture
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPositionEx
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgX
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[35a]"></a>GUI__AllocAlphaBuffer</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui__alpha.o(i.GUI__AllocAlphaBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = GUI__AllocAlphaBuffer &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
</UL>

<P><STRONG><a name="[32f]"></a>GUI__AlphaPreserveTrans</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_setalpha.o(i.GUI__AlphaPreserveTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__AlphaPreserveTrans
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AA_SetOrMask
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[339]"></a>GUI__CompactPixelIndices</STRONG> (Thumb, 396 bytes, Stack size 8 bytes, gui__compactpixelindices.o(i.GUI__CompactPixelIndices))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__CompactPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBkIndexBuffered
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReleaseBuffer
</UL>

<P><STRONG><a name="[35d]"></a>GUI__CompactPixelIndicesEx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui__compactpixelindices.o(i.GUI__CompactPixelIndicesEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI__CompactPixelIndicesEx &rArr; GUI__ConvertColor2Index
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ConvertColor2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
</UL>

<P><STRONG><a name="[35e]"></a>GUI__ConvertColor2Index</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, gui__compactpixelindices.o(i.GUI__ConvertColor2Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI__ConvertColor2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndicesEx
</UL>

<P><STRONG><a name="[2f9]"></a>GUI__DispLine</STRONG> (Thumb, 462 bytes, Stack size 56 bytes, gui_charline.o(i.GUI__DispLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[362]"></a>GUI__DoAlphaBlending</STRONG> (Thumb, 442 bytes, Stack size 96 bytes, gui__alpha.o(i.GUI__DoAlphaBlending))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = GUI__DoAlphaBlending &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ExpandPixelIndicesEx
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ReadRectEx
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfIndex2ColorEx
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
</UL>

<P><STRONG><a name="[171]"></a>GUI__ExpandPixelIndices</STRONG> (Thumb, 384 bytes, Stack size 12 bytes, gui__expandpixelindices.o(i.GUI__ExpandPixelIndices))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GUI__ExpandPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_Color2IndexBulk
</UL>

<P><STRONG><a name="[363]"></a>GUI__ExpandPixelIndicesEx</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, gui__expandpixelindices.o(i.GUI__ExpandPixelIndicesEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI__ExpandPixelIndicesEx
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
</UL>

<P><STRONG><a name="[35b]"></a>GUI__GetAlphaBuffer</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, gui__alpha.o(i.GUI__GetAlphaBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeMax
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AllocAlphaBuffer
</UL>

<P><STRONG><a name="[2f8]"></a>GUI__GetLineDistX</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, gui_charline.o(i.GUI__GetLineDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = GUI__GetLineDistX &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[2f7]"></a>GUI__GetLineNumChars</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gui_charline.o(i.GUI__GetLineNumChars))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI__GetLineNumChars &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[398]"></a>GUI__IntersectRect</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gui__private.o(i.GUI__IntersectRect))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[373]"></a>GUI__IntersectRects</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, gui__private.o(i.GUI__IntersectRects))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__IntersectRects
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectEx
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>

<P><STRONG><a name="[360]"></a>GUI__ManageCache</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui__managecache.o(i.GUI__ManageCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI__ManageCache &rArr; GUI__ManageCacheEx
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCacheEx
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[365]"></a>GUI__ManageCacheEx</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, gui__managecache.o(i.GUI__ManageCacheEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI__ManageCacheEx
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
</UL>

<P><STRONG><a name="[0]"></a>GUI__MixColors</STRONG> (Thumb, 86 bytes, Stack size 4 bytes, gui__alpha.o(i.GUI__MixColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GUI__MixColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__alpha.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>GUI__MixColorsBulk</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, gui__alpha.o(i.GUI__MixColorsBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI__MixColorsBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__alpha.o(.data)
</UL>
<P><STRONG><a name="[2db]"></a>GUI__RegisterExit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_core.o(i.GUI__RegisterExit))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_ConfigEx
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_StoreState
</UL>

<P><STRONG><a name="[3b0]"></a>GUI__memset</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, gui__private.o(i.GUI__memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI__memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowBuffer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVis
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVSize
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVRAMAddr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSize
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDevFunc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAlpha
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPos
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyBuffer
</UL>

<P><STRONG><a name="[3b2]"></a>GUI__memset16</STRONG> (Thumb, 166 bytes, Stack size 12 bytes, gui__private.o(i.GUI__memset16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GUI__memset16
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>

<P><STRONG><a name="[7]"></a>LCD_AA_MixColors16</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lcd_aa.o(i.LCD_AA_MixColors16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_AA_MixColors16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_aa.o(.data)
</UL>
<P><STRONG><a name="[35c]"></a>LCD_AA_SetOrMask</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_aa.o(i.LCD_AA_SetOrMask))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AlphaPreserveTrans
</UL>

<P><STRONG><a name="[36d]"></a>LCD_Color2Index</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd.o(i.LCD_Color2Index))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTable
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTableBM
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
</UL>

<P><STRONG><a name="[b2]"></a>LCD_Color2Index_8666</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, guicc_8666.o(i.LCD_Color2Index_8666))
<BR>[Address Reference Count : 1]<UL><LI> guicc_8666.o(.constdata)
</UL>
<P><STRONG><a name="[2d6]"></a>LCD_DrawBitmap</STRONG> (Thumb, 628 bytes, Stack size 80 bytes, lcd.o(i.LCD_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
</UL>

<P><STRONG><a name="[c8]"></a>LCD_DrawHLine</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, lcd.o(i.LCD_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_core.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>LCD_DrawPixel</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, lcd.o(i.LCD_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_DrawPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_core.o(.constdata)
</UL>
<P><STRONG><a name="[16f]"></a>LCD_FillRect</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lcd.o(i.LCD_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_FillRect
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__DrawBitmap_1bpp
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
</UL>

<P><STRONG><a name="[26f]"></a>LCD_GetBitsPerPixelEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_getex.o(i.LCD_GetBitsPerPixelEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetBitsPerPixelEx
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[2fc]"></a>LCD_GetBkColorIndex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_getcolorindex.o(i.LCD_GetBkColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
</UL>

<P><STRONG><a name="[300]"></a>LCD_GetColorIndex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_getcolorindex.o(i.LCD_GetColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
</UL>

<P><STRONG><a name="[28e]"></a>LCD_GetDevFunc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetDevFunc))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_GetpPalConvTable
</UL>

<P><STRONG><a name="[366]"></a>LCD_GetMirrorXEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_getex.o(i.LCD_GetMirrorXEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetMirrorXEx
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
</UL>

<P><STRONG><a name="[367]"></a>LCD_GetMirrorYEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_getex.o(i.LCD_GetMirrorYEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetMirrorYEx
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
</UL>

<P><STRONG><a name="[368]"></a>LCD_GetNumColors</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcd_getex.o(i.LCD_GetNumColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetNumColors
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2Color_0
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetIndexMask_0
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
</UL>

<P><STRONG><a name="[369]"></a>LCD_GetNumColorsEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_getex.o(i.LCD_GetNumColorsEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetNumColorsEx
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[36a]"></a>LCD_GetNumLayers</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcd_getnumdisplays.o(i.LCD_GetNumLayers))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetNumLayers
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[36b]"></a>LCD_GetPalette</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lcd_getex.o(i.LCD_GetPalette))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetPalette
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2Color_0
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
</UL>

<P><STRONG><a name="[301]"></a>LCD_GetPosEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd_set.o(i.LCD_GetPosEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_GetPosEx
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetLayerPosEx
</UL>

<P><STRONG><a name="[36c]"></a>LCD_GetSwapXYEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_getex.o(i.LCD_GetSwapXYEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetSwapXYEx
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVSize
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSize
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
</UL>

<P><STRONG><a name="[322]"></a>LCD_GetVXSizeEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_getex.o(i.LCD_GetVXSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetVXSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[364]"></a>LCD_GetVXSizeMax</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lcd_getex.o(i.LCD_GetVXSizeMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_GetVXSizeMax
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
</UL>

<P><STRONG><a name="[323]"></a>LCD_GetVYSizeEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_getex.o(i.LCD_GetVYSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetVYSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[32c]"></a>LCD_GetXSize</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcd_getex.o(i.LCD_GetXSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetXSize
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[306]"></a>LCD_GetXSizeDisplay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetXSizeDisplay))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
</UL>

<P><STRONG><a name="[320]"></a>LCD_GetXSizeEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_getex.o(i.LCD_GetXSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetXSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Calibrate
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[309]"></a>LCD_GetXSizeMax</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lcd_getex.o(i.LCD_GetXSizeMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_GetXSizeMax
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[32d]"></a>LCD_GetYSize</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcd_getex.o(i.LCD_GetYSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetYSize
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[307]"></a>LCD_GetYSizeDisplay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetYSizeDisplay))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
</UL>

<P><STRONG><a name="[321]"></a>LCD_GetYSizeEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_getex.o(i.LCD_GetYSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetYSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Calibrate
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[308]"></a>LCD_GetYSizeMax</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lcd_getex.o(i.LCD_GetYSizeMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_GetYSizeMax
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[28f]"></a>LCD_GetpPalConvTable</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lcd_color.o(i.LCD_GetpPalConvTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_GetpPalConvTable
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_GetpPalConvTable
</UL>

<P><STRONG><a name="[2]"></a>LCD_GetpPalConvTableBM</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lcd_color.o(i.LCD_GetpPalConvTableBM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_GetpPalConvTableBM
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_core.o(.data)
</UL>
<P><STRONG><a name="[2fd]"></a>LCD_Index2Color</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd.o(i.LCD_Index2Color))
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
</UL>

<P><STRONG><a name="[b3]"></a>LCD_Index2Color_8666</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, guicc_8666.o(i.LCD_Index2Color_8666))
<BR>[Address Reference Count : 1]<UL><LI> guicc_8666.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>LCD_Index2Color_M565</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, guicc_m565.o(i.LCD_Index2Color_M565))
<BR>[Address Reference Count : 1]<UL><LI> guicc_m565.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>LCD_Index2Color_M888</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guicc_m888_index2color.o(i.LCD_Index2Color_M888))
<BR>[Address Reference Count : 2]<UL><LI> gui__alpha.o(i.GUI__DoAlphaBlending)
<LI> guicc_m888.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>LCD_Index2Color_M8888I</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, guicc_m8888i_index2color.o(i.LCD_Index2Color_M8888I))
<BR>[Address Reference Count : 3]<UL><LI> guicc_m8888i.o(.constdata)
<LI> gui__alpha.o(i.GUI__DoAlphaBlending)
<LI> guidev_writetoactivealpha.o(i._WriteToActiveAlpha)
</UL>
<P><STRONG><a name="[36e]"></a>LCD_InitColors</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcd_color.o(i.LCD_InitColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = LCD_InitColors &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
</UL>

<P><STRONG><a name="[36f]"></a>LCD_InitLUT</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, lcd_color.o(i.LCD_InitLUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_InitLUT &rArr; LCD_SetLUTEntryEx
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLUTEntryEx
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumLayers
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColorsEx
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
</UL>

<P><STRONG><a name="[34b]"></a>LCD_SelectLCD</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lcd_selectlcd.o(i.LCD_SelectLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SelectLCD
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>

<P><STRONG><a name="[2d2]"></a>LCD_SetBkColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetBkColor))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
</UL>

<P><STRONG><a name="[375]"></a>LCD_SetBkColorIndex</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetBkColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
</UL>

<P><STRONG><a name="[372]"></a>LCD_SetClipRectEx</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lcd_setcliprectex.o(i.LCD_SetClipRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
</UL>

<P><STRONG><a name="[319]"></a>LCD_SetClipRectMax</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetClipRectMax))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
</UL>

<P><STRONG><a name="[2d4]"></a>LCD_SetColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetColor))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
</UL>

<P><STRONG><a name="[374]"></a>LCD_SetColorIndex</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
</UL>

<P><STRONG><a name="[16e]"></a>LCD_SetDevFunc</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd_set.o(i.LCD_SetDevFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetDevFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_FillRect
</UL>

<P><STRONG><a name="[30a]"></a>LCD_SetDisplaySize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_SetDisplaySize))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[2d5]"></a>LCD_SetDrawMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetDrawMode))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
</UL>

<P><STRONG><a name="[370]"></a>LCD_SetLUTEntryEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd_set.o(i.LCD_SetLUTEntryEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetLUTEntryEx
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[34c]"></a>LCD_SetPosEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd_set.o(i.LCD_SetPosEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetPosEx
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerPosEx
</UL>

<P><STRONG><a name="[26b]"></a>LCD_SetSizeEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd_set.o(i.LCD_SetSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[26e]"></a>LCD_SetVRAMAddrEx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcd_set.o(i.LCD_SetVRAMAddrEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_SetVRAMAddrEx
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[26c]"></a>LCD_SetVSizeEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd_set.o(i.LCD_SetVSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetVSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[318]"></a>LCD_UpdateColorIndices</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd_updatecolorindices.o(i.LCD_UpdateColorIndices))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_UpdateColorIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColorIndex
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[33a]"></a>LCD__DrawBitmap_1bpp</STRONG> (Thumb, 496 bytes, Stack size 104 bytes, lcd.o(i.LCD__DrawBitmap_1bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD__DrawBitmap_1bpp &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[32a]"></a>LCD__GetBPPDevice</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD__GetBPPDevice))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
</UL>

<P><STRONG><a name="[315]"></a>WM_Activate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm.o(i.WM_Activate))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[376]"></a>WM_BringToBottom</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, wm_lib.o(i.WM_BringToBottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = WM_BringToBottom &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[379]"></a>WM_CreateWindowAsChild</STRONG> (Thumb, 330 bytes, Stack size 80 bytes, wm.o(i.WM_CreateWindowAsChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = WM_CreateWindowAsChild &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
</UL>

<P><STRONG><a name="[317]"></a>WM_Deactivate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm.o(i.WM_Deactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = WM_Deactivate &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[37e]"></a>WM_DefaultProc</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, wm.o(i.WM_DefaultProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageIfEnabled
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>

<P><STRONG><a name="[381]"></a>WM_DeleteWindow</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, wm.o(i.WM_DeleteWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = WM_DeleteWindow &rArr; WM_NotifyParent &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteAllChildren
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteAllChildren
</UL>

<P><STRONG><a name="[2fb]"></a>WM_Exec</STRONG> (Thumb, 900 bytes, Stack size 208 bytes, wm.o(i.WM_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = WM_Exec &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SaveContext_W
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RestoreContext
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec
</UL>

<P><STRONG><a name="[304]"></a>WM_GetDesktopWindow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_lib.o(i.WM_GetDesktopWindow))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[3a2]"></a>WM_GetDesktopWindowEx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_lib.o(i.WM_GetDesktopWindowEx))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
</UL>

<P><STRONG><a name="[388]"></a>WM_GetFirstChild</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_lib.o(i.WM_GetFirstChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = WM_GetFirstChild &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[389]"></a>WM_GetParent</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_lib.o(i.WM_GetParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = WM_GetParent &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendTouchMessage
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
</UL>

<P><STRONG><a name="[330]"></a>WM_GetWindowOrgX</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm_lib.o(i.WM_GetWindowOrgX))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = WM_GetWindowOrgX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[95]"></a>WM_HandlePID</STRONG> (Thumb, 1130 bytes, Stack size 144 bytes, wm_touch.o(i.WM_HandlePID))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = WM_HandlePID &rArr; GUI_CURSOR_SetPositionEx &rArr; GUI_SPRITE_SetPosition &rArr; _CreateBuffer &rArr; GUI_ALLOC_GetMaxSize &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetLayerPosEx
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ReleaseCapture
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_PID__SetPrevState
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPositionEx
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendTouchMessage
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageIfEnabled
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveCriticalHandle
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsAncestor
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_IsEmpty
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_GetState
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__AddCriticalHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_pid.o(i.GUI_PID_StoreState)
</UL>
<P><STRONG><a name="[30c]"></a>WM_Init</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, wm.o(i.WM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = WM_Init &rArr; WM_CreateWindowAsChild &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__AddCriticalHandle
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[37c]"></a>WM_InvalidateRect</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, wm.o(i.WM_InvalidateRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[39a]"></a>WM_InvalidateWindowAndDescsEx</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, wm.o(i.WM_InvalidateWindowAndDescsEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM_InvalidateWindowAndDescsEx &rArr;  WM_InvalidateWindowAndDescsEx (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
</UL>

<P><STRONG><a name="[392]"></a>WM_IsWindow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_lib.o(i.WM_IsWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = WM_IsWindow &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendTouchMessage
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[175]"></a>WM_MULTIBUF_Enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wm_multibuf.o(i.WM_MULTIBUF_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMWIN_task
</UL>

<P><STRONG><a name="[39c]"></a>WM_MoveWindow</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm_move.o(i.WM_MoveWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
</UL>

<P><STRONG><a name="[383]"></a>WM_NotifyParent</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, wm_lib.o(i.WM_NotifyParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = WM_NotifyParent &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[341]"></a>WM_OnKey</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, wm_lib.o(i.WM_OnKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = WM_OnKey &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
</UL>

<P><STRONG><a name="[394]"></a>WM_PID__SetPrevState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wm_pid__getprevstate.o(i.WM_PID__SetPrevState))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[393]"></a>WM_ReleaseCapture</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, wm_setcapture.o(i.WM_ReleaseCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = WM_ReleaseCapture &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[39e]"></a>WM_ResizeWindow</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, wm_lib.o(i.WM_ResizeWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = WM_ResizeWindow &rArr; WM__UpdateChildPositions &rArr;  WM_ResizeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MergeRect
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
</UL>

<P><STRONG><a name="[38d]"></a>WM_Screen2hWin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, wm_screen2win.o(i.WM_Screen2hWin))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = WM_Screen2hWin &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindowEx
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[37b]"></a>WM_SelectWindow</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, wm.o(i.WM_SelectWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = WM_SelectWindow &rArr; GUI_SelectLayer &rArr; GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[3a4]"></a>WM_SendMessageNoPara</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wm_lib.o(i.WM_SendMessageNoPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = WM_SendMessageNoPara &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageNoPara
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
</UL>

<P><STRONG><a name="[380]"></a>WM_SendToParent</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wm_lib.o(i.WM_SendToParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM_SendToParent &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[32e]"></a>WM_SetSize</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, wm_lib.o(i.WM_SetSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = WM_SetSize &rArr; WM_ResizeWindow &rArr; WM__UpdateChildPositions &rArr;  WM_ResizeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[3a5]"></a>WM__ActivateClipRect</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, wm.o(i.WM__ActivateClipRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectEx
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
</UL>

<P><STRONG><a name="[38c]"></a>WM__AddCriticalHandle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm__private.o(i.WM__AddCriticalHandle))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[386]"></a>WM__ClipAtParentBorders</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, wm.o(i.WM__ClipAtParentBorders))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__ClipAtParentBorders
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[382]"></a>WM__DeleteAssocTimer</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, wm_timer.o(i.WM__DeleteAssocTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = WM__DeleteAssocTimer &rArr; GUI_TIMER_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetNextTimerLin
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetFirstTimer
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[37f]"></a>WM__GetClientRectEx</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm__private.o(i.WM__GetClientRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__GetClientRectEx
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectWin
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[3a6]"></a>WM__GetClientRectWin</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wm.o(i.WM__GetClientRectWin))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
</UL>

<P><STRONG><a name="[2ed]"></a>WM__GetNextIVR</STRONG> (Thumb, 818 bytes, Stack size 72 bytes, wm.o(i.WM__GetNextIVR))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
</UL>

<P><STRONG><a name="[377]"></a>WM__GetPrevSibling</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wm__private.o(i.WM__GetPrevSibling))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = WM__GetPrevSibling &rArr; WM_GetParent &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
</UL>

<P><STRONG><a name="[2ec]"></a>WM__InitIVRSearch</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, wm.o(i.WM__InitIVRSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
</UL>

<P><STRONG><a name="[37a]"></a>WM__InsertWindowIntoList</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, wm.o(i.WM__InsertWindowIntoList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WM__InsertWindowIntoList
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[396]"></a>WM__InvalidateDrawAndDescs</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, wm.o(i.WM__InvalidateDrawAndDescs))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM__InvalidateDrawAndDescs &rArr;  WM__InvalidateDrawAndDescs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[3aa]"></a>WM__InvalidateParent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm.o(i.WM__InvalidateParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__InvalidateParent
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
</UL>

<P><STRONG><a name="[385]"></a>WM__InvalidateRect</STRONG> (Thumb, 210 bytes, Stack size 64 bytes, wm.o(i.WM__InvalidateRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[378]"></a>WM__InvalidateRectEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm.o(i.WM__InvalidateRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
</UL>

<P><STRONG><a name="[38e]"></a>WM__IsAncestor</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wm__private.o(i.WM__IsAncestor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__IsAncestor
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[38f]"></a>WM__IsEnabled</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm__private.o(i.WM__IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM__IsEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[39b]"></a>WM__IsWindow</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wm.o(i.WM__IsWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM__IsWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
</UL>

<P><STRONG><a name="[39d]"></a>WM__MoveWindow</STRONG> (Thumb, 256 bytes, Stack size 128 bytes, wm_move.o(i.WM__MoveWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateParent
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
</UL>

<P><STRONG><a name="[9d]"></a>WM__Paint1</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, wm.o(i.WM__Paint1))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = WM__Paint1 &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wm.o(i.WM__PaintWinAndOverlays)
<LI> wm.o(i._PaintTransChildren)
</UL>
<P><STRONG><a name="[395]"></a>WM__RemoveCriticalHandle</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, wm__private.o(i.WM__RemoveCriticalHandle))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[37d]"></a>WM__SendMessage</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wm__private.o(i.WM__SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ReleaseCapture
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[391]"></a>WM__SendMessageIfEnabled</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, wm__private.o(i.WM__SendMessageIfEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = WM__SendMessageIfEnabled &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendTouchMessage
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[325]"></a>WM__SendMessageNoPara</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, wm__private.o(i.WM__SendMessageNoPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WM__SendMessageNoPara
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[3a1]"></a>WM__SendMsgNoData</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, wm.o(i.WM__SendMsgNoData))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>

<P><STRONG><a name="[390]"></a>WM__SendTouchMessage</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, wm_touch.o(i.WM__SendTouchMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = WM__SendTouchMessage &rArr; WM__SendMessageIfEnabled &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageIfEnabled
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[3a0]"></a>WM__UpdateChildPositions</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, wm__private.o(i.WM__UpdateChildPositions))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM__UpdateChildPositions &rArr;  WM_ResizeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>

<P><STRONG><a name="[13b]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[305]"></a>emWin_LCD_Init</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, lcd.o(i.emWin_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = emWin_LCD_Init &rArr; LCD_InitColors &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[70]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[11e]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[3f5]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[3f6]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[29f]"></a>prvCopyDataToQueue</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, queue.o(.text.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[2ab]"></a>prvNotifyQueueSetContainer</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, queue.o(.text.prvNotifyQueueSetContainer))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[2b3]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, queue.o(.text.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[296]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, tasks.o(.text.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[29a]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, tasks.o(.text.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = prvAddNewTaskToReadyList &rArr; vPortExitCritical &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[2a1]"></a>prvDeleteTCB</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tasks.o(.text.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[8f]"></a>prvIdleTask</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, tasks.o(.text.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[2a7]"></a>prvInitialiseNewTask</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, tasks.o(.text.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = prvInitialiseNewTask &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[29c]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, timers.o(.text.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[2aa]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, timers.o(.text.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[2af]"></a>prvSampleTimeNow</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, timers.o(.text.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = prvSampleTimeNow &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[90]"></a>prvTimerTask</STRONG> (Thumb, 512 bytes, Stack size 24 bytes, timers.o(.text.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = prvTimerTask &rArr; prvSampleTimeNow &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[2c7]"></a>prvPortStartFirstTask</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, port.o(.text.prvPortStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[8b]"></a>prvTaskExitError</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = prvTaskExitError &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[2c6]"></a>vPortEnableVFP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(.text.vPortEnableVFP))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[2b5]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, heap_5.o(.text.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1aa]"></a>FF_CreateLFNEntry</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, ff_dir.o(.text.FF_CreateLFNEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FF_CreateLFNEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_putChar
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateDirent
</UL>

<P><STRONG><a name="[1c6]"></a>FF_Traverse</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ff_dir.o(.text.FF_Traverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getClusterChainNumber
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_TraverseFAT
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PushEntryWithContext
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FetchEntryWithContext
</UL>

<P><STRONG><a name="[1bf]"></a>FF_ExtendFile</STRONG> (Thumb, 406 bytes, Stack size 360 bytes, ff_file.o(.text.FF_ExtendFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = FF_ExtendFile &rArr; FF_GetEntry &rArr; FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_putFATEntry
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockFAT
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseFATBuffers
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PutEntry
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockFAT
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetEntry
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetChainLength
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FlushCache
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindFreeCluster
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_FindEndOfChain
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_DecreaseFreeClusters
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_CreateClusterChain
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Write
</UL>

<P><STRONG><a name="[1d9]"></a>FF_GetSequentialClusters</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, ff_file.o(.text.FF_GetSequentialClusters))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = FF_GetSequentialClusters &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockFAT
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseFATBuffers
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockFAT
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getFATEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Write
</UL>

<P><STRONG><a name="[1ef]"></a>FF_SetCluster</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ff_file.o(.text.FF_SetCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = FF_SetCluster &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getMinorBlockNumber
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getMajorBlockNumber
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_getClusterChainNumber
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockFAT
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_TraverseFAT
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockFAT
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Cluster2LBA
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Write
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Seek
</UL>

<P><STRONG><a name="[195]"></a>FF_Truncate</STRONG> (Thumb, 208 bytes, Stack size 344 bytes, ff_file.o(.text.FF_Truncate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = FF_Truncate &rArr; FF_GetEntry &rArr; FF_PopulateLongDirent &rArr; FF_FetchEntryWithContext &rArr; FF_Traverse &rArr; FF_TraverseFAT &rArr; FF_getFATEntry &rArr; prvGetFromFATBuffers &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlockFAT
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_UnlinkClusterChain
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_TraverseFAT
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_PutEntry
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_LockFAT
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetEntry
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetChainLength
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Close
</UL>

<P><STRONG><a name="[1f2]"></a>FF_WritePartial</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ff_file.o(.text.FF_WritePartial))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = FF_WritePartial &rArr; FF_GetBuffer &rArr; FF_ReleaseSemaphore &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_ReleaseBuffer
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_GetBuffer
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Write
</UL>

<P><STRONG><a name="[295]"></a>pxFindCWD</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ff_stdio.o(.text.pxFindCWD))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = pxFindCWD &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetThreadLocalStoragePointer
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskGetThreadLocalStoragePointer
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvABSPath
</UL>

<P><STRONG><a name="[89]"></a>prvEventSetupFunction</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff_sddisk.o(.text.prvEventSetupFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = prvEventSetupFunction &rArr; vTaskSetTimeOutState &rArr; vPortExitCritical &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ff_sddisk.o(.text.prvSDMMCInit)
</UL>
<P><STRONG><a name="[8a]"></a>prvEventWaitFunction</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ff_sddisk.o(.text.prvEventWaitFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = prvEventWaitFunction &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ff_sddisk.o(.text.prvSDMMCInit)
</UL>
<P><STRONG><a name="[73]"></a>prvFFRead</STRONG> (Thumb, 388 bytes, Stack size 48 bytes, ff_sddisk.o(.text.prvFFRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = prvFFRead &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_CheckReadOperation
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSDCodePrintable
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ff_sddisk.o(.text.FF_SDDiskInit)
</UL>
<P><STRONG><a name="[72]"></a>prvFFWrite</STRONG> (Thumb, 360 bytes, Stack size 48 bytes, ff_sddisk.o(.text.prvFFWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = prvFFWrite &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_CheckWriteOperation
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSDCodePrintable
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ff_sddisk.o(.text.FF_SDDiskInit)
</UL>
<P><STRONG><a name="[2a5]"></a>prvSDCodePrintable</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ff_sddisk.o(.text.prvSDCodePrintable))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = prvSDCodePrintable &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSDMMCInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFFWrite
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvFFRead
</UL>

<P><STRONG><a name="[1e9]"></a>prvSDMMCInit</STRONG> (Thumb, 688 bytes, Stack size 64 bytes, ff_sddisk.o(.text.prvSDMMCInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = prvSDMMCInit &rArr; HAL_SD_Init &rArr; HAL_Delay &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WideBusOperation_Config
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSDCodePrintable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_SDDiskInit
</UL>

<P><STRONG><a name="[223]"></a>LTDC_SetConfig</STRONG> (Thumb, 288 bytes, Stack size 20 bytes, stm32f4xx_hal_ltdc.o(.text.LTDC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetWindowPosition
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAlpha
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAddress
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[242]"></a>SD_CmdResp1Error</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(.text.SD_CmdResp1Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SD_CmdResp1Error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WideBusOperation_Config
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_StopTransfer
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetStatus
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[74]"></a>SD_DMA_RxCplt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(.text.SD_DMA_RxCplt))
<BR><BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_DMA_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(.text.HAL_SD_ReadBlocks_DMA)
</UL>
<P><STRONG><a name="[75]"></a>SD_DMA_RxError</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(.text.SD_DMA_RxError))
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_DMA_RxErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(.text.HAL_SD_ReadBlocks_DMA)
</UL>
<P><STRONG><a name="[76]"></a>SD_DMA_TxCplt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(.text.SD_DMA_TxCplt))
<BR><BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_DMA_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(.text.HAL_SD_WriteBlocks_DMA)
</UL>
<P><STRONG><a name="[77]"></a>SD_DMA_TxError</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(.text.SD_DMA_TxError))
<BR><BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_DMA_TxErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(.text.HAL_SD_WriteBlocks_DMA)
</UL>
<P><STRONG><a name="[252]"></a>SD_FindSCR</STRONG> (Thumb, 284 bytes, Stack size 80 bytes, stm32f4xx_hal_sd.o(.text.SD_FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = SD_FindSCR &rArr; SD_CmdResp1Error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadFIFO
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WideBusOperation_Config
</UL>

<P><STRONG><a name="[25b]"></a>UART_SetConfig</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[25e]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[78]"></a>CUSTOM_CopyBuffer</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, lcdconf_lin_template.o(.text.CUSTOM_CopyBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CUSTOM_CopyBuffer &rArr; DMA2D_CopyBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_CopyBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf_lin_template.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[79]"></a>CUSTOM_CopyRect</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, lcdconf_lin_template.o(.text.CUSTOM_CopyRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CUSTOM_CopyRect &rArr; DMA2D_CopyBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_CopyBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf_lin_template.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[71]"></a>CUSTOM_FillRect</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, lcdconf_lin_template.o(.text.CUSTOM_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = CUSTOM_FillRect &rArr; GUI_GetDrawMode &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDevFunc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetDrawMode
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lcdconf_lin_template.o(.text.LCD_X_Config)
<LI> lcdconf_lin_template.o(.text.CUSTOM_FillRect)
</UL>
<P><STRONG><a name="[7c]"></a>Color2IndexBulk_M1555IDMA2D</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lcdconf_lin_template.o(.text.Color2IndexBulk_M1555IDMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Color2IndexBulk_M1555IDMA2D &rArr; DMA2D_Color2IndexBulk &rArr; GUI__ExpandPixelIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf_lin_template.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[80]"></a>Color2IndexBulk_M4444IDMA2D</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lcdconf_lin_template.o(.text.Color2IndexBulk_M4444IDMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Color2IndexBulk_M4444IDMA2D &rArr; DMA2D_Color2IndexBulk &rArr; GUI__ExpandPixelIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf_lin_template.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[7e]"></a>Color2IndexBulk_M565DMA2D</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lcdconf_lin_template.o(.text.Color2IndexBulk_M565DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Color2IndexBulk_M565DMA2D &rArr; DMA2D_Color2IndexBulk &rArr; GUI__ExpandPixelIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf_lin_template.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[82]"></a>Color2IndexBulk_M888DMA2D</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lcdconf_lin_template.o(.text.Color2IndexBulk_M888DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Color2IndexBulk_M888DMA2D &rArr; DMA2D_Color2IndexBulk &rArr; GUI__ExpandPixelIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf_lin_template.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[84]"></a>DMA2D_AlphaBlending</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, lcdconf_lin_template.o(.text.DMA2D_AlphaBlending))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2D_AlphaBlending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf_lin_template.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[170]"></a>DMA2D_Color2IndexBulk</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, lcdconf_lin_template.o(.text.DMA2D_Color2IndexBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA2D_Color2IndexBulk &rArr; GUI__ExpandPixelIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ExpandPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color2IndexBulk_M888DMA2D
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color2IndexBulk_M565DMA2D
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color2IndexBulk_M4444IDMA2D
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color2IndexBulk_M1555IDMA2D
</UL>

<P><STRONG><a name="[16c]"></a>DMA2D_CopyBuffer</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, lcdconf_lin_template.o(.text.DMA2D_CopyBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA2D_CopyBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap16bpp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_CopyRect
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_CopyBuffer
</UL>

<P><STRONG><a name="[266]"></a>DMA2D_Index2ColorBulk</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lcdconf_lin_template.o(.text.DMA2D_Index2ColorBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2D_Index2ColorBulk
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Index2ColorBulk_M888DMA2D
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Index2ColorBulk_M565DMA2D
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Index2ColorBulk_M4444IDMA2D
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Index2ColorBulk_M1555IDMA2D
</UL>

<P><STRONG><a name="[86]"></a>DMA2D_MixColors</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, lcdconf_lin_template.o(.text.DMA2D_MixColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA2D_MixColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf_lin_template.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[7d]"></a>Index2ColorBulk_M1555IDMA2D</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcdconf_lin_template.o(.text.Index2ColorBulk_M1555IDMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Index2ColorBulk_M1555IDMA2D &rArr; DMA2D_Index2ColorBulk
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf_lin_template.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[81]"></a>Index2ColorBulk_M4444IDMA2D</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcdconf_lin_template.o(.text.Index2ColorBulk_M4444IDMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Index2ColorBulk_M4444IDMA2D &rArr; DMA2D_Index2ColorBulk
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf_lin_template.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[7f]"></a>Index2ColorBulk_M565DMA2D</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcdconf_lin_template.o(.text.Index2ColorBulk_M565DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Index2ColorBulk_M565DMA2D &rArr; DMA2D_Index2ColorBulk
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf_lin_template.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[83]"></a>Index2ColorBulk_M888DMA2D</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcdconf_lin_template.o(.text.Index2ColorBulk_M888DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Index2ColorBulk_M888DMA2D &rArr; DMA2D_Index2ColorBulk
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf_lin_template.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[7b]"></a>LCD_DrawBitmap16bpp</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, lcdconf_lin_template.o(.text.LCD_DrawBitmap16bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_DrawBitmap16bpp &rArr; DMA2D_CopyBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_CopyBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf_lin_template.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[7a]"></a>LCD_DrawBitmap8bpp</STRONG> (Thumb, 210 bytes, Stack size 28 bytes, lcdconf_lin_template.o(.text.LCD_DrawBitmap8bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_DrawBitmap8bpp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf_lin_template.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[87]"></a>LCD_MixColorsBulk</STRONG> (Thumb, 154 bytes, Stack size 36 bytes, lcdconf_lin_template.o(.text.LCD_MixColorsBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_MixColorsBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf_lin_template.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[85]"></a>_LCD_GetpPalConvTable</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lcdconf_lin_template.o(.text._LCD_GetpPalConvTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _LCD_GetpPalConvTable &rArr; LCD_GetpPalConvTable
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTable
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetDevFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf_lin_template.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[b4]"></a>_GetIndexMask_8666</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, guicc_8666.o(i._GetIndexMask_8666))
<BR>[Address Reference Count : 1]<UL><LI> guicc_8666.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>_Color2IndexBulk_88666I</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, guicc_88666i.o(i._Color2IndexBulk_88666I))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _Color2IndexBulk_88666I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_88666i.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>_Color2Index_88666I</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, guicc_88666i.o(i._Color2Index_88666I))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Color2Index_88666I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_88666i.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>_GetIndexMask_88666I</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guicc_88666i.o(i._GetIndexMask_88666I))
<BR>[Address Reference Count : 1]<UL><LI> guicc_88666i.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>_Index2ColorBulk_88666I</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, guicc_88666i.o(i._Index2ColorBulk_88666I))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _Index2ColorBulk_88666I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_88666i.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>_Index2Color_88666I</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, guicc_88666i.o(i._Index2Color_88666I))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Index2Color_88666I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_88666i.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>_Color2IndexBulk_M1555I</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, guicc_m1555i.o(i._Color2IndexBulk_M1555I))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Color2IndexBulk_M1555I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_m1555i.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>_Color2Index_M1555I</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, guicc_m1555i.o(i._Color2Index_M1555I))
<BR>[Address Reference Count : 1]<UL><LI> guicc_m1555i.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>_GetIndexMask_M1555I</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guicc_m1555i.o(i._GetIndexMask_M1555I))
<BR>[Address Reference Count : 1]<UL><LI> guicc_m1555i.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>_Index2ColorBulk_M1555I</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, guicc_m1555i.o(i._Index2ColorBulk_M1555I))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Index2ColorBulk_M1555I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_m1555i.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>_Index2Color_M1555I</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, guicc_m1555i.o(i._Index2Color_M1555I))
<BR>[Address Reference Count : 1]<UL><LI> guicc_m1555i.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>_Color2IndexBulk_M4444I</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, guicc_m4444i.o(i._Color2IndexBulk_M4444I))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Color2IndexBulk_M4444I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_m4444i.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>_Color2Index_M4444I</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, guicc_m4444i.o(i._Color2Index_M4444I))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _Color2Index_M4444I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_m4444i.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>_GetIndexMask_M4444I</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guicc_m4444i.o(i._GetIndexMask_M4444I))
<BR>[Address Reference Count : 1]<UL><LI> guicc_m4444i.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>_Index2ColorBulk_M4444I</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, guicc_m4444i.o(i._Index2ColorBulk_M4444I))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Index2ColorBulk_M4444I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_m4444i.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>_Index2Color_M4444I</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, guicc_m4444i.o(i._Index2Color_M4444I))
<BR>[Address Reference Count : 1]<UL><LI> guicc_m4444i.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>_Color2IndexBulk_M8888I</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, guicc_m8888i.o(i._Color2IndexBulk_M8888I))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _Color2IndexBulk_M8888I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_m8888i.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>_Color2Index_M8888I</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, guicc_m8888i.o(i._Color2Index_M8888I))
<BR>[Address Reference Count : 1]<UL><LI> guicc_m8888i.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>_GetIndexMask_M8888I</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guicc_m8888i.o(i._GetIndexMask_M8888I))
<BR>[Address Reference Count : 1]<UL><LI> guicc_m8888i.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>_Index2ColorBulk_M8888I</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, guicc_m8888i.o(i._Index2ColorBulk_M8888I))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _Index2ColorBulk_M8888I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_m8888i.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>_OnExit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gui__alpha.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__alpha.o(i.GUI__GetAlphaBuffer)
</UL>
<P><STRONG><a name="[2e1]"></a>_AddFreeMemory</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, gui_alloc.o(i._AddFreeMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _AddFreeMemory &rArr; _RemoveFreeBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[2de]"></a>_Alloc</STRONG> (Thumb, 480 bytes, Stack size 48 bytes, gui_alloc.o(i._Alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = _Alloc &rArr;  _InitOnce (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
</UL>

<P><STRONG><a name="[3ad]"></a>_EnlargeBlocks</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, gui_alloc.o(i._EnlargeBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[2e2]"></a>_InitOnce</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, gui_alloc.o(i._InitOnce))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetMaxSize
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[2e4]"></a>_RemoveFreeBlock</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gui_alloc.o(i._RemoveFreeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _RemoveFreeBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>

<P><STRONG><a name="[2e3]"></a>_RemoveHoles</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, gui_alloc.o(i._RemoveHoles))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _RemoveHoles &rArr; _AddFreeMemory &rArr; _RemoveFreeBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>

<P><STRONG><a name="[92]"></a>_OnExit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gui_core.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _OnExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_core.o(i.GUI_Init)
</UL>
<P><STRONG><a name="[93]"></a>_OnExit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gui_multibuf.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_multibuf.o(i.GUI_MULTIBUF_ConfigEx)
</UL>
<P><STRONG><a name="[cd]"></a>_Color2IndexBulk</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, guicc_m565.o(i._Color2IndexBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_m565.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>_Color2Index_M565</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, guicc_m565.o(i._Color2Index_M565))
<BR>[Address Reference Count : 1]<UL><LI> guicc_m565.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>_GetIndexMask_M565</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guicc_m565.o(i._GetIndexMask_M565))
<BR>[Address Reference Count : 1]<UL><LI> guicc_m565.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>_Index2ColorBulk</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, guicc_m565.o(i._Index2ColorBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_m565.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>_Color2IndexBulk</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, guicc_m888.o(i._Color2IndexBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_m888.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>_Color2Index_M888</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guicc_m888.o(i._Color2Index_M888))
<BR>[Address Reference Count : 1]<UL><LI> guicc_m888.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>_GetIndexMask_M888</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guicc_m888.o(i._GetIndexMask_M888))
<BR>[Address Reference Count : 1]<UL><LI> guicc_m888.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>_Index2ColorBulk</STRONG> (Thumb, 108 bytes, Stack size 4 bytes, guicc_m888.o(i._Index2ColorBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_m888.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>_SetBkColor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lcd.o(i._SetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SetBkColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>_SetColor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lcd.o(i._SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SetColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>_SetDrawMode</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, lcd.o(i._SetDrawMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _SetDrawMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>_OnExit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd_color.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_color.o(i.LCD_InitColors)
</UL>
<P><STRONG><a name="[ac]"></a>_CopyBuffer</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, guidrv_lin_16.o(i._CopyBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = _CopyBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[d6]"></a>_DrawBitmap</STRONG> (Thumb, 1786 bytes, Stack size 72 bytes, guidrv_lin_16.o(i._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>_DrawHLine</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, guidrv_lin_16.o(i._DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _DrawHLine &rArr; _FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>_DrawVLine</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, guidrv_lin_16.o(i._DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _DrawVLine &rArr; _FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>_FillRect</STRONG> (Thumb, 534 bytes, Stack size 40 bytes, guidrv_lin_16.o(i._FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>_GetDevData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guidrv_lin_16.o(i._GetDevData))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>_GetDevFunc</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, guidrv_lin_16.o(i._GetDevFunc))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>_GetDevProp</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, guidrv_lin_16.o(i._GetDevProp))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>_GetPixelIndex</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, guidrv_lin_16.o(i._GetPixelIndex))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>_GetPos</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, guidrv_lin_16.o(i._GetPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = _GetPos &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[e1]"></a>_GetRect</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, guidrv_lin_16.o(i._GetRect))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, guidrv_lin_16.o(i._Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = _Init &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[a8]"></a>_Off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guidrv_lin_16.o(i._Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = _Off &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[a7]"></a>_On</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guidrv_lin_16.o(i._On))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = _On &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[af]"></a>_ReadRect</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, guidrv_lin_16.o(i._ReadRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ReadRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[a4]"></a>_SetAlpha</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, guidrv_lin_16.o(i._SetAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = _SetAlpha &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[a9]"></a>_SetAlphaMode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, guidrv_lin_16.o(i._SetAlphaMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = _SetAlphaMode &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[ab]"></a>_SetChroma</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, guidrv_lin_16.o(i._SetChroma))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = _SetChroma &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[aa]"></a>_SetChromaMode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, guidrv_lin_16.o(i._SetChromaMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = _SetChromaMode &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[ae]"></a>_SetDevFunc</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, guidrv_lin_16.o(i._SetDevFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = _SetDevFunc &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[dd]"></a>_SetOrg</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, guidrv_lin_16.o(i._SetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = _SetOrg &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorYEx
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorXEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>_SetPixelIndex</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, guidrv_lin_16.o(i._SetPixelIndex))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>_SetPos</STRONG> (Thumb, 366 bytes, Stack size 80 bytes, guidrv_lin_16.o(i._SetPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = _SetPos &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeDisplay
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeDisplay
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[a1]"></a>_SetSize</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, guidrv_lin_16.o(i._SetSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = _SetSize &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[9f]"></a>_SetVRAMAddr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, guidrv_lin_16.o(i._SetVRAMAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = _SetVRAMAddr &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[a0]"></a>_SetVSize</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, guidrv_lin_16.o(i._SetVSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = _SetVSize &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[a5]"></a>_SetVis</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, guidrv_lin_16.o(i._SetVis))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = _SetVis &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[ad]"></a>_ShowBuffer</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, guidrv_lin_16.o(i._ShowBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = _ShowBuffer &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[dc]"></a>_XorPixel</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, guidrv_lin_16.o(i._XorPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _XorPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>_MULTIBUF_Begin</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, wm_multibuf.o(i._MULTIBUF_Begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _MULTIBUF_Begin &rArr; GUI_MULTIBUF_BeginEx
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_BeginEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_multibuf.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>_MULTIBUF_End</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, wm_multibuf.o(i._MULTIBUF_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _MULTIBUF_End &rArr; GUI_MULTIBUF_EndEx
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_EndEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_multibuf.o(.constdata)
</UL>
<P><STRONG><a name="[5]"></a>_Log2VisBuffered</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_charline.o(i._Log2VisBuffered))
<BR>[Address Reference Count : 1]<UL><LI> gui_charline.o(.data)
</UL>
<P><STRONG><a name="[91]"></a>_OnExit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_task.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_task.o(i.GUITASK_Init)
</UL>
<P><STRONG><a name="[ee]"></a>_CalcSizeOfChar</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._CalcSizeOfChar))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>_Encode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._Encode))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>_GetCharCode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._GetCharCode))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>_GetCharSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._GetCharSize))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>_Color2Index_0</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, guicc_0.o(i._Color2Index_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Color2Index_0 &rArr; LCD_GetNumColors
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CalcColorDist
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_0.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>_GetIndexMask_0</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, guicc_0.o(i._GetIndexMask_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetIndexMask_0 &rArr; LCD_GetNumColors
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_0.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>_Index2Color_0</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, guicc_0.o(i._Index2Color_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _Index2Color_0 &rArr; LCD_GetNumColors
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_0.o(.constdata)
</UL>
<P><STRONG><a name="[343]"></a>LCD_ReadRectEx</STRONG> (Thumb, 544 bytes, Stack size 64 bytes, lcd_readrect.o(i.LCD_ReadRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_ReadRectEx
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ReadRectEx
</UL>

<P><STRONG><a name="[f3]"></a>_DrawBitmap</STRONG> (Thumb, 2106 bytes, Stack size 136 bytes, guidev_16.o(i._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _DrawBitmap &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>_DrawHLine</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, guidev_16.o(i._DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _DrawHLine &rArr; _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>_DrawVLine</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, guidev_16.o(i._DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _DrawVLine
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>_FillRect</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, guidev_16.o(i._FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset16
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>_GetDevData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guidev_16.o(i._GetDevData))
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>_GetDevFunc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guidev_16.o(i._GetDevFunc))
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>_GetDevProp</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, guidev_16.o(i._GetDevProp))
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>_GetPixelIndex</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, guidev_16.o(i._GetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>_GetRect</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, guidev_16.o(i._GetRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetRect
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>_SetOrg</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, guidev_16.o(i._SetOrg))
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>_SetPixelIndex</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, guidev_16.o(i._SetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _SetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>_XorPixel</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, guidev_16.o(i._XorPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _XorPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[387]"></a>WM__PaintWinAndOverlays</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, wm.o(i.WM__PaintWinAndOverlays))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WM__PaintWinAndOverlays &rArr; _PaintTransChildren &rArr;  _PaintTransChildren (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbPaintMemDev
</UL>

<P><STRONG><a name="[384]"></a>_DeleteAllChildren</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm.o(i._DeleteAllChildren))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = _DeleteAllChildren &rArr;  WM_DeleteWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[3a8]"></a>_Findx0</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, wm.o(i._Findx0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = _Findx0 &rArr;  _Findx0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
</UL>

<P><STRONG><a name="[3a9]"></a>_Findx1</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, wm.o(i._Findx1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = _Findx1 &rArr;  _Findx1 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
</UL>

<P><STRONG><a name="[3a7]"></a>_Findy1</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, wm.o(i._Findy1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = _Findy1 &rArr;  _Findy1 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
</UL>

<P><STRONG><a name="[399]"></a>_Invalidate1Abs</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, wm.o(i._Invalidate1Abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Invalidate1Abs &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MergeRect
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[9c]"></a>_OnExit</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, wm.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _OnExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(i.WM_Init)
</UL>
<P><STRONG><a name="[3ac]"></a>_PaintTransChildren</STRONG> (Thumb, 304 bytes, Stack size 64 bytes, wm.o(i._PaintTransChildren))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = _PaintTransChildren &rArr;  _PaintTransChildren (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>

<P><STRONG><a name="[9b]"></a>_cbBackWin</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, wm.o(i._cbBackWin))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = _cbBackWin &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(i.WM_Init)
</UL>
<P><STRONG><a name="[9a]"></a>_cbPaintMemDev</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wm.o(i._cbPaintMemDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _cbPaintMemDev &rArr; WM__PaintWinAndOverlays &rArr; _PaintTransChildren &rArr;  _PaintTransChildren (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(i.WM_Exec)
</UL>
<P><STRONG><a name="[94]"></a>_OnExit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_pid.o(i._OnExit))
<BR>[Address Reference Count : 1]<UL><LI> gui_pid.o(i.GUI_PID_StoreState)
</UL>
<P><STRONG><a name="[3ab]"></a>_MoveDescendents</STRONG> (Thumb, 122 bytes, Stack size 72 bytes, wm_move.o(i._MoveDescendents))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
</UL>

<P><STRONG><a name="[ff]"></a>_DrawBitmap</STRONG> (Thumb, 2084 bytes, Stack size 136 bytes, guidev_32.o(i._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _DrawBitmap &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>_DrawHLine</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, guidev_32.o(i._DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _DrawHLine &rArr; _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>_DrawVLine</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, guidev_32.o(i._DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DrawVLine
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>_FillRect</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, guidev_32.o(i._FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>_GetDevData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guidev_32.o(i._GetDevData))
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>_GetDevFunc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guidev_32.o(i._GetDevFunc))
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>_GetDevProp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guidev_32.o(i._GetDevProp))
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>_GetPixelIndex</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, guidev_32.o(i._GetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>_GetRect</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, guidev_32.o(i._GetRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetRect
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>_SetOrg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev_32.o(i._SetOrg))
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>_SetPixelIndex</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, guidev_32.o(i._SetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _SetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>_XorPixel</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, guidev_32.o(i._XorPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _XorPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>GUI_USAGE_BM_AddHLine</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, guidev_usagebm.o(i.GUI_USAGE_BM_AddHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GUI_USAGE_BM_AddHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>GUI_USAGE_BM_AddPixel</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, guidev_usagebm.o(i.GUI_USAGE_BM_AddPixel))
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>GUI_USAGE_BM_Clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, guidev_usagebm.o(i.GUI_USAGE_BM_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GUI_USAGE_BM_Clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>GUI_USAGE_BM_GetNextDirty</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, guidev_usagebm.o(i.GUI_USAGE_BM_GetNextDirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_USAGE_BM_GetNextDirty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>_GUI_USAGE_BM_Delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, guidev_usagebm.o(i._GUI_USAGE_BM_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = _GUI_USAGE_BM_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.constdata)
</UL>
<P><STRONG><a name="[3a3]"></a>_Screen2hWin</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, wm_screen2win.o(i._Screen2hWin))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = _Screen2hWin &rArr;  _Screen2hWin (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
</UL>

<P><STRONG><a name="[345]"></a>_CreateBuffer</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, gui_sprite.o(i._CreateBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = _CreateBuffer &rArr; GUI_ALLOC_GetMaxSize &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetMaxSize
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
</UL>

<P><STRONG><a name="[348]"></a>_GetBkIndexAlpha</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, gui_sprite.o(i._GetBkIndexAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _GetBkIndexAlpha
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitmapPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
</UL>

<P><STRONG><a name="[349]"></a>_ReleaseBuffer</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, gui_sprite.o(i._ReleaseBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = _ReleaseBuffer &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
</UL>

<P><STRONG><a name="[347]"></a>_SetBkIndexBuffered</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, gui_sprite.o(i._SetBkIndexBuffered))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _SetBkIndexBuffered &rArr; GUI__CompactPixelIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
</UL>

<P><STRONG><a name="[335]"></a>_WriteToActiveAlpha</STRONG> (Thumb, 402 bytes, Stack size 136 bytes, guidev_writetoactivealpha.o(i._WriteToActiveAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = _WriteToActiveAlpha &rArr; GUI__DoAlphaBlending &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; GUI_X_InitOS &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AllocAlphaBuffer
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndicesEx
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
</UL>

<P><STRONG><a name="[6f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
